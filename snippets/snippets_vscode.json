{
  "ethernetip_resource_endpoint-write-snippet": {
    "prefix": "snippet:ethernetip:resource:endpoint-write",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "writeEndpoint:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: EthernetIp",
      "    connection: !ref ethernetIpConnection",
      "    write:",
      "      tagName: dn_count",
      "      programName: SimulationMain",
      "      tagType: DINT",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-write is a ethernetip resource snippet",
    "isFileTemplate": true
  },
  "ethernetip_resource_endpoint-read-snippet": {
    "prefix": "snippet:ethernetip:resource:endpoint-read",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "readEndpoint:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: EthernetIp",
      "    connection: !ref ethernetIpConnection",
      "    read:",
      "      tagName: dn_count",
      "      programName: SimulationMain",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-read is a ethernetip resource snippet",
    "isFileTemplate": true
  },
  "ethernetip_resource_connection-snippet": {
    "prefix": "snippet:ethernetip:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "Connection:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: EthernetIp",
      "    connection:",
      "      host: !ref host",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  host:",
      "    type: string",
      "    default: 192.168.10.99",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a ethernetip resource snippet",
    "isFileTemplate": true
  },
  "ethernetip_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:ethernetip:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "subscribeEndpoint:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: EthernetIp",
      "    connection: !ref ethernetIpConnection",
      "    subscribe:",
      "      tagName: dn_array[0]",
      "      programName:",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a ethernetip resource snippet",
    "isFileTemplate": true
  },
  "ethernetip_bridge_read-write-template": {
    "prefix": "template:ethernetip:bridge:read-write",
    "body": [
      "description: >",
      "  Sample EtherNet/IP service commissioning file",
      "",
      "metadata:",
      "  name: Sample EtherNet/IP service",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 1.0.0",
      "",
      "parameters:",
      "  host:",
      "    type: string",
      "    default: 192.168.10.99",
      "resources:",
      "  ethernetIpConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: EthernetIp",
      "      connection:",
      "        host: !ref host",
      "",
      "  sampleSubscription:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: EthernetIp",
      "      connection: !ref ethernetIpConnection",
      "      subscribe:",
      "        tagName: dn_array[0]",
      "        programName:",
      "",
      "  sampleRead:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: EthernetIp",
      "      connection: !ref ethernetIpConnection",
      "      read:",
      "        tagName: dn_count",
      "        programName: SimulationMain",
      "",
      "  sampleWrite:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: EthernetIp",
      "      connection: !ref ethernetIpConnection",
      "      write:",
      "        tagName: dn_count",
      "        programName: SimulationMain",
      "        tagType: DINT"
    ],
    "description": "read-write is a ethernetip bridge template",
    "isFileTemplate": true
  },
  "openprotocol_resource_role-snippet": {
    "prefix": "snippet:openprotocol:resource:role",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Role:",
      "    type: Cybus::Role",
      "    properties:",
      "      permissions:",
      "      - resource: '#'",
      "        operation: readWrite",
      "        context: mqtt",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "role is a openprotocol resource snippet",
    "isFileTemplate": true
  },
  "openprotocol_resource_connection-snippet": {
    "prefix": "snippet:openprotocol:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      agentName: !ref atlasCopcoAgentName",
      "      protocol: Openprotocol",
      "      connection:",
      "        host: !ref atlasCopcoDeviceHost",
      "        port: !ref atlasCopcoDevicePort",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  atlasCopcoAgentName:",
      "    type: string",
      "    description: The protocol-mapper agent name where our openprotocol/atlascopco",
      "      connector is running",
      "    default: openprotocol",
      "",
      "  atlasCopcoDeviceHost:",
      "    type: string",
      "    description: IP or hostname of the Atlas Copco device",
      "",
      "  atlasCopcoDevicePort:",
      "    type: integer",
      "    description: Port of the Atlas Copco device",
      "    default: 4545",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a openprotocol resource snippet",
    "isFileTemplate": true
  },
  "openprotocol_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:openprotocol:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  subscribeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: psetSelected",
      "      subscribe:",
      "        midGroup: psetSelected",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a openprotocol resource snippet",
    "isFileTemplate": true
  },
  "openprotocol_bridge_multi_endpoints-template": {
    "prefix": "template:openprotocol:bridge:multi_endpoints",
    "body": [
      "description: !sub 'Atlas Copco Open Protocol Connector for device ${atlasCopcoDeviceId}'",
      "",
      "metadata:",
      "",
      "  name: Open Protocol Connector",
      "",
      "parameters:",
      "",
      "  atlasCopcoAgentName:",
      "    type: string",
      "    description: The protocol-mapper agent name where our openprotocol/atlascopco",
      "      connector is running",
      "    default: openprotocol",
      "",
      "  atlasCopcoDeviceId:",
      "    type: string",
      "    description: ID or name of the Atlas Copco Device",
      "    default: myPowerFocus6000",
      "",
      "  atlasCopcoDeviceHost:",
      "    type: string",
      "    description: IP or hostname of the Atlas Copco device",
      "",
      "  atlasCopcoDevicePort:",
      "    type: integer",
      "    description: Port of the Atlas Copco device",
      "    default: 4545",
      "",
      "resources:",
      "",
      "  openProtocolConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      agentName: !ref atlasCopcoAgentName",
      "      protocol: Openprotocol",
      "      connection:",
      "        host: !ref atlasCopcoDeviceHost",
      "        port: !ref atlasCopcoDevicePort",
      "",
      "  psetSelected:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: psetSelected",
      "      subscribe:",
      "        midGroup: psetSelected",
      "",
      "  lockAtBatchDoneUpload:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: lockAtBatchDoneUpload",
      "      subscribe:",
      "        midGroup: lockAtBatchDoneUpload",
      "",
      "  jobInfo:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: jobInfo",
      "      subscribe:",
      "        midGroup: jobInfo",
      "",
      "  vin:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: vin",
      "      subscribe:",
      "        midGroup: vin",
      "",
      "  lastTightening:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: lastTightening",
      "      subscribe:",
      "        midGroup: lastTightening",
      "",
      "  alarm:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: alarm",
      "      subscribe:",
      "        midGroup: alarm",
      "",
      "  alarmStatus:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: alarmStatus",
      "      subscribe:",
      "        midGroup: alarmStatus",
      "",
      "  alarmAcknowledged:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: alarmAcknowledged",
      "      subscribe:",
      "        midGroup: alarmAcknowledged",
      "",
      "  multiSpindleStatus:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: multiSpindleStatus",
      "      subscribe:",
      "        midGroup: multiSpindleStatus",
      "",
      "  multiSpindleResult:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: multiSpindleResult",
      "      subscribe:",
      "        midGroup: multiSpindleResult",
      "",
      "  lastPowerMACSTighteningResultStationData:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: lastPowerMACSTighteningResultStationData",
      "      subscribe:",
      "        midGroup: lastPowerMACSTighteningResultStationData",
      "",
      "  jobLineControl:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: jobLineControl",
      "      subscribe:",
      "        midGroup: jobLineControl",
      "",
      "  multipleIdentifierResultParts:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: multipleIdentifierResultParts",
      "      subscribe:",
      "        midGroup: multipleIdentifierResultParts",
      "",
      "  statusExternallyMonitoredInputs:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: statusExternallyMonitoredInputs",
      "      subscribe:",
      "        midGroup: statusExternallyMonitoredInputs",
      "",
      "  relayFunction:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: relayFunction",
      "      subscribe:",
      "        midGroup: relayFunction",
      "",
      "  digitalInputFunction:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: digitalInputFunction",
      "      subscribe:",
      "        midGroup: digitalInputFunction",
      "",
      "  userData:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: userData",
      "      subscribe:",
      "        midGroup: userData",
      "",
      "  selectorSocketInfo:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: selectorSocketInfo",
      "      subscribe:",
      "        midGroup: selectorSocketInfo",
      "",
      "  toolTagID:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: toolTagID",
      "      subscribe:",
      "        midGroup: toolTagID",
      "",
      "  automaticManualMode:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: automaticManualMode",
      "      subscribe:",
      "        midGroup: automaticManualMode",
      "",
      "  openProtocolCommandsDisabled:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: openProtocolCommandsDisabled",
      "      subscribe:",
      "        midGroup: openProtocolCommandsDisabled",
      "",
      "  motorTuningResultData:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Openprotocol",
      "      connection: !ref openProtocolConnection",
      "      topic: motorTuningResultData",
      "      subscribe:",
      "        midGroup: motorTuningResultData",
      "",
      "  # this extends the defaultRole with more permissions!",
      "  defaultRole:",
      "    type: Cybus::Role",
      "    properties:",
      "      permissions:",
      "      - resource: '#'",
      "        operation: readWrite",
      "        context: mqtt"
    ],
    "description": "multi_endpoints is a openprotocol bridge template",
    "isFileTemplate": true
  },
  "grafana_resource_ingressroute-snippet": {
    "prefix": "snippet:grafana:resource:ingressroute",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Ingressroute:",
      "    type: Cybus::IngressRoute",
      "    properties:",
      "      container: !ref genericGrafana",
      "      type: http",
      "      slug: grafana",
      "      target:",
      "        path: /",
      "        port: 3000",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # FRONTENDS",
      "  #----------------------------------------------------------------------------",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "ingressroute is a grafana resource snippet",
    "isFileTemplate": true
  },
  "grafana_resource_volume-snippet": {
    "prefix": "snippet:grafana:resource:volume",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Volume:",
      "    type: Cybus::Volume",
      "    properties: {}",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "volume is a grafana resource snippet",
    "isFileTemplate": true
  },
  "grafana_resource_container-snippet": {
    "prefix": "snippet:grafana:resource:container",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Container:",
      "    type: Cybus::Container",
      "    properties:",
      "      image: grafana/grafana:10.2.3",
      "      volumes:",
      "      - !sub '${grafanaVolume}:/var/lib/grafana'",
      "      environment:",
      "        GF_SERVER_ROOT_URL: !sub '/services/${Cybus::ServiceId}/grafana'",
      "        GF_AUTH_ANONYMOUS_ENABLED: true",
      "",
      "  #----------------------------------------------------------------------------",
      "  # VOLUMES",
      "  #----------------------------------------------------------------------------",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "container is a grafana resource snippet",
    "isFileTemplate": true
  },
  "grafana_resource_link-snippet": {
    "prefix": "snippet:grafana:resource:link",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Link:",
      "    type: Cybus::Link",
      "    properties:",
      "      name: Grafana",
      "      ingressRoute: !ref grafanaURL",
      "      href: ''",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # ENDPOINTS",
      "  #----------------------------------------------------------------------------",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "link is a grafana resource snippet",
    "isFileTemplate": true
  },
  "grafana_app_deploy-template": {
    "prefix": "template:grafana:app:deploy",
    "body": [
      "description: Test commissioning File for Grafana Dashboard Grafana",
      "",
      "metadata:",
      "  name: Grafana",
      "  version: 1.1.1",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "#------------------------------------------------------------------------------",
      "# parameters:",
      "#------------------------------------------------------------------------------",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Definitions",
      "#------------------------------------------------------------------------------",
      "",
      "",
      "resources:",
      "  #----------------------------------------------------------------------------",
      "  # CONNECTIONS",
      "  #----------------------------------------------------------------------------",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # CONTAINERS",
      "  #----------------------------------------------------------------------------",
      "",
      "  genericGrafana:",
      "    type: Cybus::Container",
      "    properties:",
      "      image: grafana/grafana:10.2.3",
      "      volumes:",
      "      - !sub '${grafanaVolume}:/var/lib/grafana'",
      "      environment:",
      "        GF_SERVER_ROOT_URL: !sub '/services/${Cybus::ServiceId}/grafana'",
      "        GF_AUTH_ANONYMOUS_ENABLED: true",
      "",
      "  #----------------------------------------------------------------------------",
      "  # VOLUMES",
      "  #----------------------------------------------------------------------------",
      "",
      "  grafanaVolume:",
      "    type: Cybus::Volume",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # INGRESS ROUTES",
      "  #----------------------------------------------------------------------------",
      "",
      "  # Grafana",
      "  grafanaURL:",
      "    type: Cybus::IngressRoute",
      "    properties:",
      "      container: !ref genericGrafana",
      "      type: http",
      "      slug: grafana",
      "      target:",
      "        path: /",
      "        port: 3000",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # FRONTENDS",
      "  #----------------------------------------------------------------------------",
      "",
      "  Grafana_WebUI:",
      "    type: Cybus::Link",
      "    properties:",
      "      name: Grafana",
      "      ingressRoute: !ref grafanaURL",
      "      href: ''",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # ENDPOINTS",
      "  #----------------------------------------------------------------------------"
    ],
    "description": "deploy is a grafana app template",
    "isFileTemplate": true
  },
  "http_resource_endpoint-write-snippet": {
    "prefix": "snippet:http:resource:endpoint-write",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  writeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      topic: dataLakeStorageEndpoint",
      "      protocol: Http",
      "      connection: !ref connection",
      "      write:",
      "        headers:",
      "          x-ms-blob-type: BlockBlob",
      "          Content-Type: application/octet-stream",
      "        method: put",
      "        path: !sub ${azureStorageFilePath}",
      "      buffering:",
      "        enabled: true",
      "        keepOrder: true",
      "        burstInterval: 100",
      "        burstSize: 1",
      "        bufferMaxSize: 100000",
      "        bufferMaxAge: 7200",
      "  # Converting JSON objects to binary format is currently not supported with native methods.",
      "  # The following endpoint demonstrates how it would look, if it was possible.",
      "  # As a workaround we use the Workbench to send the body as a byte array.",
      "  # Define mapping to publish all data received on topic Azure/DataLake/write to endpoint",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  azureStorageFilePath:",
      "    description: Path in Azure Blob Storage where file are to be stored",
      "    type: string",
      "    default: /supplychain-lz/shopfloor/cybus/",
      "",
      "  # Create a configurable parameter to define SAS token for valid authentication with ADL upon service installation",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-write is a http resource snippet",
    "isFileTemplate": true
  },
  "http_resource_connection-azure_datalake-snippet": {
    "prefix": "snippet:http:resource:connection-azure_datalake",
    "body": [
      "#------------------------------------------------------------------------------",
      "# !!! Move me under parameteres section",
      "#------------------------------------------------------------------------------",
      "azureStorageHost:",
      "  description: Host name of the Azure Blob Storage resource",
      "  type: string",
      "  default: sttesaanalyticsdev.blob.core.windows.net",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# !!! Move me under resources section",
      "#------------------------------------------------------------------------------",
      "connection:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Http",
      "    connection:",
      "      scheme: https",
      "      host: !ref azureStorageHost"
    ],
    "description": "connection-azure_datalake is a http resource snippet",
    "isFileTemplate": true
  },
  "http_resource_connection-teams-snippet": {
    "prefix": "snippet:http:resource:connection-teams",
    "body": [
      "# !!! Move me under parameteres section",
      "parameters:",
      "  webhookHost:",
      "    type: string",
      "    description: The Host portion of the Webhook for an MS Teams Channel",
      "    default: outlook.office.com",
      "    pattern: ^([\\w-]+(\\.[\\w-]+)*)\\.office\\.com$",
      "",
      "# !!! Move me under resources section",
      "teamsHttpConnection:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Http",
      "    connection:",
      "      scheme: https",
      "      port: 443",
      "      host: !ref webhookHost"
    ],
    "description": "connection-teams is a http resource snippet",
    "isFileTemplate": true
  },
  "http_resource_connection-tls-snippet": {
    "prefix": "snippet:http:resource:connection-tls",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Http",
      "      connection:",
      "        scheme: https",
      "        host: !ref azureStorageHost",
      "",
      "",
      "  # # Define write endpoint to write data (HTTP PUT) to corresponding Data Lake endpoint with the path parameter",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  azureStorageHost:",
      "    description: Host name of the Azure Blob Storage resource",
      "    type: string",
      "    default: sttesaanalyticsdev.blob.core.windows.net",
      "",
      "  # Create a configurable parameter to define the file storage path (HTTP endpoint) upon service installation",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection-tls is a http resource snippet",
    "isFileTemplate": true
  },
  "http_resource_connection-snippet": {
    "prefix": "snippet:http:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Http",
      "      connection:",
      "        scheme: http",
      "        host: !ref httpHost",
      "        port: !ref httpPort",
      "        connectionStrategy:",
      "          initialDelay: !ref initialReconnectDelay",
      "          maxDelay: !ref maxReconnectDelay",
      "          incrementFactor: !ref factorReconnectDelay",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  httpHost:",
      "    description: IP address of the HTTP Server",
      "    type: string",
      "    default: retoolapi.dev",
      "",
      "  httpPort:",
      "    description: HTTP port of the Server",
      "    type: number",
      "    default: 80",
      "",
      "  initialReconnectDelay:",
      "    type: integer",
      "    default: 1000",
      "",
      "  maxReconnectDelay:",
      "    type: integer",
      "    default: 30000",
      "",
      "  factorReconnectDelay:",
      "    type: integer",
      "    default: 2",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a http resource snippet",
    "isFileTemplate": true
  },
  "http_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:http:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  subscribeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Http",
      "      connection: !ref httpConnection",
      "      topic: oleson/api/data",
      "      subscribe: # read",
      "        path: /kwhCost/euro # http path",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a http resource snippet",
    "isFileTemplate": true
  },
  "http_edgeToEdge_teams_notification-to_mqtt-template": {
    "prefix": "template:http:edgeToEdge:teams_notification-to_mqtt",
    "body": [
      "description: |",
      "  Sends deviation notifications to Microsoft Teams, using the Incoming Webhook for Microsoft 365 Groups.",
      "",
      "metadata:",
      "  name: Teams Notifications",
      "  version: 1.0.0",
      "",
      "parameters:",
      "  webhookHost:",
      "    type: string",
      "    description: The Host portion of the Webhook for an MS Teams Channel",
      "    default: outlook.office.com",
      "    pattern: ^([\\w-]+(\\.[\\w-]+)*)\\.office\\.com$",
      "  webhookPath:",
      "    type: string",
      "    description: The Path portion of the Webhook for an MS Teams Channel",
      "    pattern: ^[\\w-]+\\/[\\w-]+@[\\w-]+\\/[\\w-]+\\/[\\w-]+\\/[\\w-]+$",
      "",
      "resources:",
      "  teamsHttpConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Http",
      "      connection:",
      "        scheme: https",
      "        port: 443",
      "        host: !ref webhookHost",
      "",
      "  teamsWebhookEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Http",
      "      connection: !ref teamsHttpConnection",
      "      write:",
      "        path: !ref webhookPath",
      "",
      "  notificationMapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "        - topic: !sub '${Cybus::MqttRoot}/+/+resource'",
      "          label: '{resource}'",
      "        - topic: $SYS/+/active/mqtt/connections",
      "          label: connections",
      "        publish:",
      "          endpoint: !ref teamsWebhookEndpoint",
      "        rules:",
      "        - collect: {}",
      "        - transform:",
      "            expression: '{\"timestamp\": $now(), \"value\": *[state != \"connected\" and",
      "              ($millis()-timestamp > 30000)]}'",
      "        - cov:",
      "            key: value",
      "        - transform:",
      "            expression: '{\"text\": value ? $string(value) : \"All Deviations cleared.\"}'"
    ],
    "description": "teams_notification-to_mqtt is a http edgeToEdge template",
    "isFileTemplate": true
  },
  "http_edgeToEdge_to_sql-template": {
    "prefix": "template:http:edgeToEdge:to_sql",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# Commissioning File",
      "# ----------------------------------------------------------------------------#",
      "# Copyright: Cybus GmbH (2021)",
      "# Contact: support@cybus.io",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: >",
      "  Sample commissioning file for forwarding HTTP/REST endpoint to SQL database",
      "",
      "metadata:",
      "  name: Http to SQL Connectivity",
      "  icon: https://www.cybus.io/wp-content/uploads/2017/10/for-whom1.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "",
      "  httpHost:",
      "    description: IP address of the HTTP Server",
      "    type: string",
      "    default: 192.168.0.1",
      "",
      "  httpPort:",
      "    description: HTTP port of the Server",
      "    type: number",
      "    default: 80",
      "",
      "  sqlURL:",
      "    description: The URL of the database server",
      "    type: string",
      "    default: mariadb://root:my-secret-pw@localhost:3306/mysql",
      "",
      "resources:",
      "",
      "# ----------------------------------------------------------------------------#",
      "# HTTP/Rest",
      "# ----------------------------------------------------------------------------#",
      "",
      "  httpConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Http",
      "      connection:",
      "        scheme: https",
      "        host: !ref httpHost",
      "        port: !ref httpPort",
      "",
      "  httpCounter:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Http",
      "      connection: !ref httpConnection",
      "      subscribe:",
      "        path: /counter",
      "",
      "# ----------------------------------------------------------------------------#",
      "# SQL",
      "# ----------------------------------------------------------------------------#",
      "",
      "  sqlConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Sql",
      "      connection:",
      "        url: !ref sqlURL",
      "",
      "  sqlQuery:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Sql",
      "      connection: !ref sqlConnection",
      "      write:",
      "        # Here we use the placeholder $someValue. The protocol driver will insert",
      "        # the value from the input JSON message under the key someValue",
      "        query: INSERT INTO test (id, some_column) VALUES ($id, $someValue)",
      "",
      "# ----------------------------------------------------------------------------#",
      "# Mapping",
      "# ----------------------------------------------------------------------------#",
      "",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "          endpoint: !ref httpCounter",
      "        publish:",
      "          endpoint: !ref sqlQuery"
    ],
    "description": "to_sql is a http edgeToEdge template",
    "isFileTemplate": true
  },
  "http_edgeToEdge_azure-datalake-template": {
    "prefix": "template:http:edgeToEdge:azure-datalake",
    "body": [
      "description: |",
      "  Provides Azure Blob Storage file creation, based on the Azure Data Lake Gen2 Rest API",
      "",
      "metadata:",
      "  name: Azure Data Lake HTTP",
      "  version: 0.0.4",
      "",
      "# ----------------------------------------------------------------",
      "# PARAMETERS",
      "# ----------------------------------------------------------------",
      "",
      "parameters:",
      "",
      "  # Create a configurable parameter to define the Azure Data Lake (ADL) instance (Hostname) upon service installation",
      "  azureStorageHost:",
      "    description: Host name of the Azure Blob Storage resource",
      "    type: string",
      "    default: sttesaanalyticsdev.blob.core.windows.net",
      "",
      "  # Create a configurable parameter to define the file storage path (HTTP endpoint) upon service installation",
      "  azureStorageFilePath:",
      "    description: Path in Azure Blob Storage where file are to be stored",
      "    type: string",
      "    default: /supplychain-lz/shopfloor/cybus/",
      "",
      "  # Create a configurable parameter to define SAS token for valid authentication with ADL upon service installation",
      "  azureSAStoken:",
      "    description: SAS Token for the Azure resource",
      "    type: string",
      "",
      "# ----------------------------------------------------------------",
      "# RESOURCES",
      "# ----------------------------------------------------------------",
      "",
      "resources:",
      "",
      "  # Defining connection to Azure Data Lake using the host parameter",
      "  connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Http",
      "      connection:",
      "        scheme: https",
      "        host: !ref azureStorageHost",
      "",
      "",
      "  # # Define write endpoint to write data (HTTP PUT) to corresponding Data Lake endpoint with the path parameter",
      "  writeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      topic: dataLakeStorageEndpoint",
      "      protocol: Http",
      "      connection: !ref connection",
      "      write:",
      "        headers:",
      "          x-ms-blob-type: BlockBlob",
      "          Content-Type: application/octet-stream",
      "        method: put",
      "        path: !sub ${azureStorageFilePath}",
      "      buffering:",
      "        enabled: true",
      "        keepOrder: true",
      "        burstInterval: 100",
      "        burstSize: 1",
      "        bufferMaxSize: 100000",
      "        bufferMaxAge: 7200",
      "  # Converting JSON objects to binary format is currently not supported with native methods.",
      "  # The following endpoint demonstrates how it would look, if it was possible.",
      "  # As a workaround we use the Workbench to send the body as a byte array.",
      "  # Define mapping to publish all data received on topic Azure/DataLake/write to endpoint",
      "  globalScope:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "        - topic: Azure/DataLake/write       # a topic where files to be wirtten are generated",
      "        publish:",
      "          topic: !ref writeEndpoint",
      "        rules:",
      "        - transform:",
      "              # This transform expression defines the path to write (PUT) files according to the parameter and the parentDir and fileName provided in the payload",
      "              # The SAS token is appended at the end to provide the required authorization",
      "              # The \"host\" property is only required for the workaround",
      "            expression: !sub |-",
      "              {",
      "                \"host\": \"${azureStorageHost}\",",
      "                \"path\": \"${azureStorageFilePath}\" & $string(parentDir) & $string(fileName) & \"?resource=file&${azureSAStoken}\",",
      "                \"body\": body",
      "              }"
    ],
    "description": "azure-datalake is a http edgeToEdge template",
    "isFileTemplate": true
  },
  "http_edgeToEdge_to_opcua-template": {
    "prefix": "template:http:edgeToEdge:to_opcua",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# Commissioning File",
      "# ----------------------------------------------------------------------------#",
      "# Copyright: Cybus GmbH (2020)",
      "# Contact: support@cybus.io",
      "# ----------------------------------------------------------------------------#",
      "# Source Interface Definition - HTTP/REST endpoint",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: >",
      "  Sample commissioning file for communicating with HTTP/REST endpoint",
      "",
      "metadata:",
      "  name: kWHCost REST API",
      "  icon: https://www.cybus.io/wp-content/uploads/2017/10/for-whom1.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "",
      "  httpHost:",
      "    description: IP address of the HTTP Server",
      "    type: string",
      "    default: retoolapi.dev",
      "",
      "  httpPort:",
      "    description: HTTP port of the Server",
      "    type: number",
      "    default: 80",
      "",
      "  initialReconnectDelay:",
      "    type: integer",
      "    default: 1000",
      "",
      "  maxReconnectDelay:",
      "    type: integer",
      "    default: 30000",
      "",
      "  factorReconnectDelay:",
      "    type: integer",
      "    default: 2",
      "",
      "  opcuaHost:",
      "    type: string",
      "    description: OPC UA Host Address",
      "    default: opcua.demo-this.com  # change for your IP address",
      "",
      "  opcuaPort:",
      "    type: integer",
      "    description: OPC UA Host Port",
      "    default: 51210",
      "",
      "  # opcuaUser:",
      "  #   type: string",
      "  #   default: ''",
      "",
      "  # opcuaPass:",
      "  #   type: string",
      "  #   default: ''",
      "",
      "resources:",
      "  opcuaConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Opcua",
      "      connection:",
      "        host: !ref opcuaHost",
      "        port: !ref opcuaPort",
      "      # username: !ref opcuaUser",
      "      # password: !ref opcuaPass",
      "",
      "  kwhCostOpcua:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref opcuaConnection",
      "      write:",
      "        nodeId: ns=2;i=10219",
      "",
      "  httpConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Http",
      "      connection:",
      "        scheme: http",
      "        host: !ref httpHost",
      "        port: !ref httpPort",
      "        connectionStrategy:",
      "          initialDelay: !ref initialReconnectDelay",
      "          maxDelay: !ref maxReconnectDelay",
      "          incrementFactor: !ref factorReconnectDelay",
      "",
      "  kwhCostHttp:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Http",
      "      connection: !ref httpConnection",
      "      topic: oleson/api/data",
      "      subscribe: # read",
      "        path: /kwhCost/euro # http path",
      "",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "          endpoint: !ref kwhCostHttp",
      "        publish:",
      "          endpoint: !ref kwhCostOpcua",
      "        rules:",
      "        - transform:",
      "            expression: |-",
      "              {",
      "                \"value\": $.value.kWHUnitCost",
      "              }"
    ],
    "description": "to_opcua is a http edgeToEdge template",
    "isFileTemplate": true
  },
  "mqtt_resource_endpoint-write-snippet": {
    "prefix": "snippet:mqtt:resource:endpoint-write",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  writeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      connection: !ref mqttConnection",
      "      topic: d2cEndpoint",
      "      qos: 0",
      "      write:",
      "        topic: !sub \"devices/${iotHubDeviceID}/messages/events/\"",
      "      buffering:",
      "        enabled: true",
      "        keepOrder: true",
      "        burstInterval: 100",
      "        burstSize: 1",
      "        bufferMaxSize: 100000",
      "        bufferMaxAge: 7200",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  iotHubDeviceID:",
      "    type: string",
      "    default: device-001",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-write is a mqtt resource snippet",
    "isFileTemplate": true
  },
  "mqtt_resource_connection-azure_iothub-template": {
    "prefix": "template:mqtt:resource:connection-azure_iothub",
    "body": [
      "description: >",
      "  - Connects to Azure IoT Hub via MQTT.",
      "  - Write data to Azure IoT Hub from a predefined topic-",
      "",
      "metadata:",
      "  name: Azure IoT Hub MQTT",
      "  homepage: ",
      "    https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-mqtt-support#using-the-mqtt-protocol-directly-as-a-device",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  iotHubName:",
      "    type: string",
      "    default: aih-cybus-dev-001.azure-devices.net",
      "",
      "  iotHubDeviceID:",
      "    type: string",
      "    default: device-001",
      "",
      "  iotHubSasToken:",
      "    type: string",
      "",
      "  iotHubMqttPort:",
      "    type: number",
      "    default: 8883",
      "",
      "definitions:",
      "    # you need to generate a certificate and copy its content here. ",
      "    # more secure ways like using local vault or CI/CD Variables of github or gitlab is recommended.",
      "  tlsCaCert: |",
      "    -----BEGIN CERTIFICATE-----",
      "    <Your Certificate>",
      "    -----END CERTIFICATE-----",
      "",
      "resources:",
      "  mqttConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mqtt",
      "      connection:",
      "          #url: !sub \"mqtts://${iotHubName}:${iotHubMqttPort}\"",
      "        host: !ref iotHubName",
      "        port: !ref iotHubMqttPort",
      "        username: !sub \"${iotHubName}/${iotHubDeviceID}/?api-version=2021-04-12\"",
      "        password: !ref iotHubSasToken",
      "        clientId: !ref iotHubDeviceID",
      "        scheme: tls",
      "        caCert: !ref tlsCaCert",
      "        keepalive: 3600"
    ],
    "description": "connection-azure_iothub is a mqtt resource template",
    "isFileTemplate": true
  },
  "mqtt_resource_connection-azure_event_grid-template": {
    "prefix": "template:mqtt:resource:connection-azure_event_grid",
    "body": [
      "#------------------------------------------------------------------------------",
      "# Meta Data",
      "#------------------------------------------------------------------------------",
      "description: |",
      "  Azure Connection to Event Grid",
      "metadata:",
      "  name: Connection Azure Event Grid",
      "  version: 1.0.0",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Parameters",
      "#------------------------------------------------------------------------------",
      "parameters:",
      "  mqtt_host:",
      "    type: string",
      "    default: <host>.eventgrid.azure.net",
      "  mqtt_username:",
      "    type: string",
      "    default: username",
      "  client_cert:",
      "    type: string",
      "    default: client cert",
      "  client_key:",
      "    type: string",
      "    default: private key",
      "",
      "#------------------------------------------------------------------------------",
      "# Constants",
      "#------------------------------------------------------------------------------",
      "definitions:",
      "  CLIENT_ID: demo-cybus-connectware",
      "  MQTT_PORT: 8883",
      "  SCHEME: mqtts",
      "  PROTOCOL_VERSION: 5",
      "",
      "#------------------------------------------------------------------------------",
      "# Resources",
      "#------------------------------------------------------------------------------",
      "resources:",
      "  connection_azure_event_grid:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mqtt",
      "      connection:",
      "        host: !ref mqtt_host",
      "        port: !ref MQTT_PORT",
      "        scheme: !ref SCHEME",
      "        clientId: !ref CLIENT_ID",
      "        protocolVersion: !ref PROTOCOL_VERSION",
      "        keepalive: 3600",
      "        reconnectPeriod: 5000",
      "        connectTimeout: 5000",
      "        mutualAuthentication: true",
      "        trustAllCertificates: true # choose true to allow self-signed certificates",
      "        # The device certificate as Base64 encoded PEM CRT file content",
      "        # openssl enc -base64 -in /cybus/degtsaw1141_cert.pem",
      "        username: !ref mqtt_username",
      "        clientCert: !ref client_cert",
      "        clientPrivateKey: !ref client_key"
    ],
    "description": "connection-azure_event_grid is a mqtt resource template",
    "isFileTemplate": true
  },
  "mqtt_resource_connection-tls-snippet": {
    "prefix": "snippet:mqtt:resource:connection-tls",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mqtt",
      "      connection:",
      "          #url: !sub \"mqtts://${iotHubName}:${iotHubMqttPort}\"",
      "        host: !ref iotHubName",
      "        port: !ref iotHubMqttPort",
      "        username: !sub \"${iotHubName}/${iotHubDeviceID}/?api-version=2021-04-12\"",
      "        password: !ref iotHubSasToken",
      "        clientId: !ref iotHubDeviceID",
      "        scheme: tls",
      "        caCert: !ref tlsCaCert",
      "        keepalive: 3600",
      "",
      "",
      "    # Device to Cloud",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  iotHubName:",
      "    type: string",
      "    default: aih-cybus-dev-001.azure-devices.net",
      "",
      "  iotHubMqttPort:",
      "    type: number",
      "    default: 8883",
      "",
      "  iotHubDeviceID:",
      "    type: string",
      "    default: device-001",
      "",
      "  iotHubSasToken:",
      "    type: string",
      "",
      "MOVE MY CONTENT TO DEFINITIONS:",
      "  tlsCaCert: |",
      "    -----BEGIN CERTIFICATE-----",
      "    <Your Certificate>",
      "    -----END CERTIFICATE-----",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection-tls is a mqtt resource snippet",
    "isFileTemplate": true
  },
  "mqtt_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:mqtt:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  subscribeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      connection: !ref mqttConnection",
      "      subscribe:",
      "        topic: some/test1",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a mqtt resource snippet",
    "isFileTemplate": true
  },
  "mqtt_resource_connection-azure_event_grid-snippet": {
    "prefix": "snippet:mqtt:resource:connection-azure_event_grid",
    "body": [
      "# !!! Move me under parameteres section",
      "mqtt_host:",
      "  type: string",
      "  default: <host>.eventgrid.azure.net",
      "mqtt_username:",
      "  type: string",
      "  default: username",
      "client_cert:",
      "  type: string",
      "  default: client cert",
      "client_key:",
      "  type: string",
      "  default: private key",
      "",
      "# !!! Move me under resources section",
      "connection_azure_event_grid:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Mqtt",
      "    connection:",
      "      host: !ref mqtt_host",
      "      port: !ref MQTT_PORT",
      "      scheme: !ref SCHEME",
      "      clientId: !ref CLIENT_ID",
      "      protocolVersion: !ref PROTOCOL_VERSION",
      "      keepalive: 3600",
      "      reconnectPeriod: 5000",
      "      connectTimeout: 5000",
      "      mutualAuthentication: true",
      "      trustAllCertificates: true # choose true to allow self-signed certificates",
      "      # The device certificate as Base64 encoded PEM CRT file content",
      "      # openssl enc -base64 -in /cybus/degtsaw1141_cert.pem",
      "      username: !ref mqtt_username",
      "      clientCert: !ref client_cert",
      "      clientPrivateKey: !ref client_key"
    ],
    "description": "connection-azure_event_grid is a mqtt resource snippet",
    "isFileTemplate": true
  },
  "mqtt_resource_connection-mtls-snippet": {
    "prefix": "snippet:mqtt:resource:connection-mtls",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mqtt",
      "      connection:",
      "        host: !ref mqttHost",
      "        port: 8883",
      "        scheme: mqtts",
      "        protocolVersion: 5",
      "        username: !ref mqttUsername",
      "        mutualAuthentication: true",
      "        trustAllCertificates: true # choose true to allow self-signed certificates",
      "        # The device certificate as Base64 encoded PEM CRT file content",
      "        # openssl enc -base64 -in /cybus/degtsaw1141_cert.pem",
      "        clientCert: !ref clientCert",
      "        clientPrivateKey: !ref clientPrivateKey",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  mqttHost:",
      "    type: string",
      "    default: westeurope-1.ts.eventgrid.azure.net   # change to your event grid",
      "",
      "  mqttUsername:",
      "    type: string",
      "    default: user   # change to your username",
      "",
      "  clientCert:",
      "    type: string",
      "    default: # place your cert here",
      "",
      "  clientPrivateKey:",
      "    type: string",
      "    default: # place your key here",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection-mtls is a mqtt resource snippet",
    "isFileTemplate": true
  },
  "mqtt_bridge_azure_eventgrid-wirte-template": {
    "prefix": "template:mqtt:bridge:azure_eventgrid-wirte",
    "body": [
      "#------------------------------------------------------------------------------",
      "# Meta Data",
      "#------------------------------------------------------------------------------",
      "description: |",
      "  Azure Connection to Event Grid",
      "metadata:",
      "  name: Push Azure Event Grid",
      "  version: 1.0.0",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "#------------------------------------------------------------------------------",
      "# Parameters",
      "#------------------------------------------------------------------------------",
      "parameters:",
      "  mqtt_host:",
      "    type: string",
      "    default: <host>.eventgrid.azure.net",
      "  mqtt_username:",
      "    type: string",
      "    default: username",
      "  client_cert:",
      "    type: string",
      "    default: client cert",
      "  client_key:",
      "    type: string",
      "    default: private key",
      "",
      "  identifier_param:",
      "    type: string",
      "    description: unique_name in service-id",
      "    default: '1234567890'",
      "  location_path:",
      "    type: string",
      "    description: location path",
      "    default: cybus/",
      "  datamodel_type:",
      "    type: string",
      "    description: datamodel type",
      "    default: TotalElectricalEnergyConsumption",
      "  datamodel_version:",
      "    type: string",
      "    description: datamodel version",
      "    default: 1.0.0",
      "  azure_topic:",
      "    type: string",
      "    description: Topic in Azure",
      "    default: test",
      "",
      "#------------------------------------------------------------------------------",
      "# Constants",
      "#------------------------------------------------------------------------------",
      "definitions:",
      "  CLIENT_ID: demo-cybus-connectware",
      "  MQTT_PORT: 8883",
      "  SCHEME: mqtts",
      "  PROTOCOL_VERSION: 5",
      "  AZURE_QOS: 1",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Resources",
      "#------------------------------------------------------------------------------",
      "resources:",
      "  connection_azure_event_grid:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mqtt",
      "      connection:",
      "        host: !ref mqtt_host",
      "        port: !ref MQTT_PORT",
      "        scheme: !ref SCHEME",
      "        clientId: !ref CLIENT_ID",
      "        protocolVersion: !ref PROTOCOL_VERSION",
      "        keepalive: 3600",
      "        reconnectPeriod: 5000",
      "        connectTimeout: 5000",
      "        mutualAuthentication: true",
      "        trustAllCertificates: true # choose true to allow self-signed certificates",
      "        # The device certificate as Base64 encoded PEM CRT file content",
      "        # openssl enc -base64 -in /cybus/degtsaw1141_cert.pem",
      "        username: !ref mqtt_username",
      "        clientCert: !ref client_cert",
      "        clientPrivateKey: !ref client_key",
      "",
      "  send_data_azure:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      connection: !ref connection_azure_event_grid",
      "      write:",
      "        qos: !ref AZURE_QOS",
      "        topic: !ref azure_topic",
      "        properties:",
      "          userProperties:",
      "            datamodelType: !ref datamodel_type",
      "            datamodelVersion: !ref datamodel_version",
      "            locationPath: !ref location_path",
      "            identifier: !ref identifier_param"
    ],
    "description": "azure_eventgrid-wirte is a mqtt bridge template",
    "isFileTemplate": true
  },
  "mqtt_bridge_azure_eventgrid-write-snippet": {
    "prefix": "snippet:mqtt:bridge:azure_eventgrid-write",
    "body": [
      "# move me to parameters",
      "mqtt_host:",
      "  type: string",
      "  default: <host>.eventgrid.azure.net",
      "mqtt_username:",
      "  type: string",
      "  default: username",
      "client_cert:",
      "  type: string",
      "  default: client cert",
      "client_key:",
      "  type: string",
      "  default: private key",
      "identifier_param:",
      "  type: string",
      "  description: unique_name in service-id",
      "  default: '1234567890'",
      "location_path:",
      "  type: string",
      "  description: location path",
      "  default: cybus/",
      "datamodel_type:",
      "  type: string",
      "  description: datamodel type",
      "  default: TotalElectricalEnergyConsumption",
      "datamodel_version:",
      "  type: string",
      "  description: datamodel version",
      "  default: 1.0.0",
      "azure_topic:",
      "  type: string",
      "  description: Topic in Azure",
      "  default: test",
      "",
      "",
      "# move me to definitions",
      "definitions:",
      "  CLIENT_ID: demo-cybus-connectware",
      "  MQTT_PORT: 8883",
      "  SCHEME: mqtts",
      "  PROTOCOL_VERSION: 5",
      "  AZURE_QOS: 1",
      "",
      "# move me to resources",
      "connection_azure_event_grid:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Mqtt",
      "    connection:",
      "      host: !ref mqtt_host",
      "      port: !ref MQTT_PORT",
      "      scheme: !ref SCHEME",
      "      clientId: !ref CLIENT_ID",
      "      protocolVersion: !ref PROTOCOL_VERSION",
      "      keepalive: 3600",
      "      reconnectPeriod: 5000",
      "      connectTimeout: 5000",
      "      mutualAuthentication: true",
      "      trustAllCertificates: true # choose true to allow self-signed certificates",
      "      # The device certificate as Base64 encoded PEM CRT file content",
      "      # openssl enc -base64 -in /cybus/degtsaw1141_cert.pem",
      "      username: !ref mqtt_username",
      "      clientCert: !ref client_cert",
      "      clientPrivateKey: !ref client_key",
      "",
      "# move me to resources",
      "send_data_azure:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Mqtt",
      "    connection: !ref connection_azure_event_grid",
      "    write:",
      "      qos: !ref AZURE_QOS",
      "      topic: !ref azure_topic",
      "      properties:",
      "        userProperties:",
      "          datamodelType: !ref datamodel_type",
      "          datamodelVersion: !ref datamodel_version",
      "          locationPath: !ref location_path",
      "          identifier: !ref identifier_param"
    ],
    "description": "azure_eventgrid-write is a mqtt bridge snippet",
    "isFileTemplate": true
  },
  "mqtt_bridge_azure_eventgrid-multiple_sessions_write-snippet": {
    "prefix": "snippet:mqtt:bridge:azure_eventgrid-multiple_sessions_write",
    "body": [
      "# move me to definations",
      "mqttConnection: &mqttConnection",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Mqtt",
      "    connection:",
      "      host: !ref mqttHost",
      "      port: 8883",
      "      scheme: mqtts",
      "      protocolVersion: 5",
      "      username: !ref mqttUsername",
      "      mutualAuthentication: true",
      "      trustAllCertificates: true # choose true to allow self-signed certificates",
      "      # The device certificate as Base64 encoded PEM CRT file content",
      "      # openssl enc -base64 -in /cybus/degtsaw1141_cert.pem",
      "      clientCert: !ref clientCert",
      "      clientPrivateKey: !ref clientPrivateKey",
      "",
      "# move me to parameters",
      "mqttHost:",
      "  type: string",
      "  default: westeurope-1.ts.eventgrid.azure.net   # change to your event grid",
      "",
      "mqttUsername:",
      "  type: string",
      "  default: user   # change to your username",
      "",
      "location:",
      "  type: string",
      "  default: DE",
      "",
      "manufacturingLine:",
      "  type: string",
      "  default: mainline",
      "",
      "clientCert:",
      "  type: string",
      "  default: # place your cert here",
      "",
      "clientPrivateKey:",
      "  type: string",
      "  default: # place your key here",
      "",
      "# move me to under resources",
      "mqttConnection1:",
      "  <<: *mqttConnection",
      "",
      "mqttConnection2:",
      "  <<: *mqttConnection",
      "",
      "mqttConnection3:",
      "  <<: *mqttConnection",
      "",
      "mqttConnection4:",
      "  <<: *mqttConnection",
      "",
      "",
      "publishingEndpoint1:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Mqtt",
      "    topic: '1'",
      "    qos: 0",
      "    connection: !ref mqttConnection1",
      "    write:",
      "      topic: contosotopics/topic1     # Writing to Azure event grid, target topic",
      "",
      "publishingEndpoint2:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Mqtt",
      "    topic: '2'",
      "    qos: 0",
      "    connection: !ref mqttConnection2",
      "    write:",
      "      topic: contosotopics/topic1",
      "",
      "publishingEndpoint3:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Mqtt",
      "    topic: '3'",
      "    qos: 0",
      "    connection: !ref mqttConnection3",
      "    write:",
      "      topic: contosotopics/topic1",
      "",
      "publishingEndpoint4:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Mqtt",
      "    topic: '4'",
      "    qos: 0",
      "    connection: !ref mqttConnection4",
      "    write:",
      "      topic: contosotopics/topic1",
      "",
      "# this mapping is only defined to apply the multisession technique",
      "mapping:",
      "  type: Cybus::Mapping",
      "  properties:",
      "    mappings:",
      "    - subscribe:",
      "        topic: data/burst-test/south-1     # Data source -- southbound",
      "      rules:",
      "      - setContextVars:",
      "          vars:",
      "            connectionId: $random()*4 ~> $ceil()      # randomizing a session number",
      "      publish:",
      "        topic: !sub \"${Cybus::MqttRoot}/$connectionId/set\""
    ],
    "description": "azure_eventgrid-multiple_sessions_write is a mqtt bridge snippet",
    "isFileTemplate": true
  },
  "mqtt_bridge_azure_eventgrid-multiple_sessions_write-template": {
    "prefix": "template:mqtt:bridge:azure_eventgrid-multiple_sessions_write",
    "body": [
      "description: >2",
      "",
      "  MQTT Client North to Azure Event Grid",
      "  Docs: https://docs.cybus.io/latest/user/protocols/mqtt.html",
      "",
      "metadata:",
      "  name: north-azure-event-grid",
      "  version: '1'",
      "",
      "",
      "definitions:",
      "",
      "  mqttConnection: &mqttConnection",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mqtt",
      "      connection:",
      "        host: !ref mqttHost",
      "        port: 8883",
      "        scheme: mqtts",
      "        protocolVersion: 5",
      "        username: !ref mqttUsername",
      "        mutualAuthentication: true",
      "        trustAllCertificates: true # choose true to allow self-signed certificates",
      "        # The device certificate as Base64 encoded PEM CRT file content",
      "        # openssl enc -base64 -in /cybus/degtsaw1141_cert.pem",
      "        clientCert: !ref clientCert",
      "        clientPrivateKey: !ref clientPrivateKey",
      "",
      "parameters:",
      "",
      "  mqttHost:",
      "    type: string",
      "    default: westeurope-1.ts.eventgrid.azure.net   # change to your event grid",
      "",
      "  mqttUsername:",
      "    type: string",
      "    default: user   # change to your username",
      "",
      "  location:",
      "    type: string",
      "    default: DE",
      "",
      "  manufacturingLine:",
      "    type: string",
      "    default: mainline",
      "",
      "  clientCert:",
      "    type: string",
      "    default: # place your cert here",
      "",
      "  clientPrivateKey:",
      "    type: string",
      "    default: # place your key here",
      "",
      "resources:",
      "",
      "  mqttConnection1:",
      "    <<: *mqttConnection",
      "",
      "  mqttConnection2:",
      "    <<: *mqttConnection",
      "  mqttConnection3:",
      "    <<: *mqttConnection",
      "",
      "  mqttConnection4:",
      "    <<: *mqttConnection",
      "",
      "",
      "",
      "  publishingEndpoint1:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      topic: '1'",
      "      qos: 0",
      "      connection: !ref mqttConnection1",
      "      write:",
      "        topic: contosotopics/topic1     # Writing to Azure event grid, target topic",
      "",
      "  publishingEndpoint2:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      topic: '2'",
      "      qos: 0",
      "      connection: !ref mqttConnection2",
      "      write:",
      "        topic: contosotopics/topic1",
      "",
      "  publishingEndpoint3:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      topic: '3'",
      "      qos: 0",
      "      connection: !ref mqttConnection3",
      "      write:",
      "        topic: contosotopics/topic1",
      "  publishingEndpoint4:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      topic: '4'",
      "      qos: 0",
      "      connection: !ref mqttConnection4",
      "      write:",
      "        topic: contosotopics/topic1",
      "  # this mapping is only defined to apply the multisession technique",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "          topic: data/burst-test/south-1     # Data source -- southbound",
      "        rules:",
      "        - setContextVars:",
      "            vars:",
      "              connectionId: $random()*4 ~> $ceil()      # randomizing a session number",
      "        publish:",
      "          topic: !sub \"${Cybus::MqttRoot}/$connectionId/set\""
    ],
    "description": "azure_eventgrid-multiple_sessions_write is a mqtt bridge template",
    "isFileTemplate": true
  },
  "mqtt_bridge_publisher-tls-template": {
    "prefix": "template:mqtt:bridge:publisher-tls",
    "body": [
      "description: >2",
      "",
      "  MQTT Connection Test",
      "",
      "metadata:",
      "  name: MQTT Connection Test",
      "",
      "parameters:",
      "  mqttHost:",
      "    type: string",
      "    description: IP or hostname of the broker",
      "",
      "  mqttUsername:",
      "    type: string",
      "    description: MQTT Username",
      "",
      "  mqttPassword:",
      "    type: string",
      "    description: MQTT Password",
      "",
      "resources:",
      "  mqttsConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mqtt",
      "      connection:",
      "        host: !ref mqttHost",
      "        port: 8883",
      "        scheme: mqtts",
      "        username: !ref mqttUsername",
      "        password: !ref mqttPassword",
      "        trustAllCertificates: false         # choose true to allow self-signed certificates",
      "",
      "  testEndpoint1:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      connection: !ref mqttConnection",
      "      write:",
      "        topic: some/test1"
    ],
    "description": "publisher-tls is a mqtt bridge template",
    "isFileTemplate": true
  },
  "mqtt_bridge_azure_eventgrid-snippet": {
    "prefix": "snippet:mqtt:bridge:azure_eventgrid",
    "body": [
      "# move me to under parameters",
      "mqttHost:",
      "  type: string",
      "  default: westeurope-1.ts.eventgrid.azure.net   # change to your event grid",
      "",
      "mqttUsername:",
      "  type: string",
      "  default: user   # change to your username",
      "",
      "location:",
      "  type: string",
      "  default: DE",
      "",
      "manufacturingLine:",
      "  type: string",
      "  default: mainline",
      "",
      "clientCert:",
      "  type: string",
      "  default: # place your cert here",
      "",
      "clientPrivateKey:",
      "  type: string",
      "  default: # place your key here",
      "",
      "# move me to under resources",
      "mqttConnection:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Mqtt",
      "    connection:",
      "      host: !ref mqttHost",
      "      port: 8883",
      "      scheme: mqtts",
      "      protocolVersion: 5",
      "      username: !ref mqttUsername",
      "      mutualAuthentication: true",
      "      trustAllCertificates: true # choose true to allow self-signed certificates",
      "      # The device certificate as Base64 encoded PEM CRT file content",
      "      # openssl enc -base64 -in /cybus/degtsaw1141_cert.pem",
      "      clientCert: !ref clientCert",
      "      clientPrivateKey: !ref clientPrivateKey",
      "",
      "publishingEndpoint:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Mqtt",
      "    topic: '1'",
      "    qos: 0",
      "    connection: !ref mqttConnection1",
      "    write:",
      "      topic: contosotopics/topic1     # Writing to Azure event grid, target topic"
    ],
    "description": "azure_eventgrid is a mqtt bridge snippet",
    "isFileTemplate": true
  },
  "mqtt_bridge_subsciber-tls-template": {
    "prefix": "template:mqtt:bridge:subsciber-tls",
    "body": [
      "description: >2",
      "",
      "  MQTT Connection Test",
      "",
      "metadata:",
      "  name: MQTT Connection Test",
      "",
      "parameters:",
      "  mqttHost:",
      "    type: string",
      "    description: IP or hostname of the broker",
      "",
      "  mqttUsername:",
      "    type: string",
      "    description: MQTT Username",
      "",
      "  mqttPassword:",
      "    type: string",
      "    description: MQTT Password",
      "",
      "resources:",
      "  mqttConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mqtt",
      "      connection:",
      "        host: !ref mqttHost",
      "        port: 8883",
      "        scheme: mqtts",
      "        username: !ref mqttUsername",
      "        password: !ref mqttPassword",
      "        trustAllCertificates: false         # choose true to allow self-signed certificates",
      "",
      "  testEndpoint1:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      connection: !ref mqttConnection",
      "      subscribe:",
      "        topic: some/test1"
    ],
    "description": "subsciber-tls is a mqtt bridge template",
    "isFileTemplate": true
  },
  "mqtt_edgeToEdge_azure_iothub-template": {
    "prefix": "template:mqtt:edgeToEdge:azure_iothub",
    "body": [
      "description: >",
      "  - Connects to Azure IoT Hub via MQTT.",
      "  - Write data to Azure IoT Hub from a predefined topic-",
      "",
      "metadata:",
      "  name: Azure IoT Hub MQTT",
      "  homepage: ",
      "    https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-mqtt-support#using-the-mqtt-protocol-directly-as-a-device",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  iotHubName:",
      "    type: string",
      "    default: aih-cybus-dev-001.azure-devices.net",
      "",
      "  iotHubDeviceID:",
      "    type: string",
      "    default: device-001",
      "",
      "  iotHubSasToken:",
      "    type: string",
      "",
      "  iotHubMqttPort:",
      "    type: number",
      "    default: 8883",
      "",
      "definitions:",
      "  tlsCaCert: |",
      "    -----BEGIN CERTIFICATE-----",
      "    <Your Certificate>",
      "    -----END CERTIFICATE-----",
      "",
      "resources:",
      "  mqttConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mqtt",
      "      connection:",
      "          #url: !sub \"mqtts://${iotHubName}:${iotHubMqttPort}\"",
      "        host: !ref iotHubName",
      "        port: !ref iotHubMqttPort",
      "        username: !sub \"${iotHubName}/${iotHubDeviceID}/?api-version=2021-04-12\"",
      "        password: !ref iotHubSasToken",
      "        clientId: !ref iotHubDeviceID",
      "        scheme: tls",
      "        caCert: !ref tlsCaCert",
      "        keepalive: 3600",
      "",
      "",
      "    # Device to Cloud",
      "  d2cEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mqtt",
      "      connection: !ref mqttConnection",
      "      topic: d2cEndpoint",
      "      qos: 0",
      "      write:",
      "        topic: !sub \"devices/${iotHubDeviceID}/messages/events/\"",
      "      buffering:",
      "        enabled: true",
      "        keepOrder: true",
      "        burstInterval: 100",
      "        burstSize: 1",
      "        bufferMaxSize: 100000",
      "        bufferMaxAge: 7200",
      "",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "              ## Important!!!",
      "              # A topic, where source data be published.",
      "              # please create and provision it.",
      "          topic: <source/topic>",
      "        publish:",
      "          endpoint: !ref d2cEndpoint"
    ],
    "description": "azure_iothub is a mqtt edgeToEdge template",
    "isFileTemplate": true
  },
  "mariadb_resource_ingressroute-snippet": {
    "prefix": "snippet:mariadb:resource:ingressroute",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "Ingressroute:",
      "  type: Cybus::IngressRoute",
      "  properties:",
      "    container: !ref mariadb",
      "    type: tcp",
      "    containerPort: 3306",
      "    connectwarePort: 3306",
      "",
      "    #----------------------------------------------------------------------------",
      "    # CONTAINERS",
      "    #----------------------------------------------------------------------------",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "ingressroute is a mariadb resource snippet",
    "isFileTemplate": true
  },
  "mariadb_resource_volume-snippet": {
    "prefix": "snippet:mariadb:resource:volume",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "Volume:",
      "  type: Cybus::Volume",
      "  properties: {}",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "volume is a mariadb resource snippet",
    "isFileTemplate": true
  },
  "mariadb_resource_connection-snippet": {
    "prefix": "snippet:mariadb:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "Connection:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Sql",
      "    connection:",
      "      url: !ref connectionUrlMariaDb",
      "      probeConnectionDelay: 10000",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  connectionUrlMariaDb:",
      "    type: string",
      "    default: mariadb://root:admin@connectware:3306/generic",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a mariadb resource snippet",
    "isFileTemplate": true
  },
  "mariadb_resource_container-snippet": {
    "prefix": "snippet:mariadb:resource:container",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "Container:",
      "  type: Cybus::Container",
      "  properties:",
      "    image: mariadb:latest",
      "    volumes:",
      "    - !sub '${mariadbVolume}:/var/lib/mariadb'",
      "    environment:",
      "      MARIADB_DATABASE: generic",
      "      MARIADB_ROOT_PASSWORD: admin",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "container is a mariadb resource snippet",
    "isFileTemplate": true
  },
  "mariadb_bridge_mariadb_write-template": {
    "prefix": "template:mariadb:bridge:mariadb_write",
    "body": [
      "description: >",
      "  System Test - MariaDB Write Test",
      "",
      "metadata:",
      "  name: MariaDB JSON Write Test",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  connectionUrlMariaDb:",
      "    type: string",
      "    default: mariadb://root:admin@connectware:3306/generic",
      "",
      "definitions:",
      "  databaseName: generic",
      "  tableName: specSheets",
      "",
      "resources:",
      "  sqlConnection_MariaDb:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Sql",
      "      connection:",
      "        url: !ref connectionUrlMariaDb",
      "        probeConnectionDelay: 10000",
      "",
      "  sqlQuery_CreateDatabase:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Sql",
      "      connection: !ref sqlConnection_MariaDb",
      "      write:",
      "        # one shot database creation",
      "        query: !sub 'CREATE DATABASE IF NOT EXISTS ${databaseName}'",
      "",
      "  sqlQuery_CreateDatabase_interval:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Sql",
      "      connection: !ref sqlConnection_MariaDb",
      "      subscribe:",
      "        # one shot database creation",
      "        query: !sub 'CREATE DATABASE IF NOT EXISTS ${databaseName}'",
      "        interval: 10000",
      "",
      "  sqlQuery_CreateTable_Data:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Sql",
      "      connection: !ref sqlConnection_MariaDb",
      "      write:",
      "        # one shot data table creation",
      "        query: !sub |",
      "          CREATE TABLE IF NOT EXISTS ${databaseName}.${tableName} (",
      "            id INT AUTO_INCREMENT PRIMARY KEY,",
      "            specSheet json not null",
      "            )",
      "",
      "  sqlQuery_CountRecords:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Sql",
      "      connection: !ref sqlConnection_MariaDb",
      "      subscribe:",
      "        query: !sub 'SELECT count(1) FROM ${databaseName}.${tableName}'",
      "        interval: 5000",
      "",
      "  sqlQuery_Insert_Data:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Sql",
      "      connection: !ref sqlConnection_MariaDb",
      "      write:",
      "        query: !sub |",
      "          INSERT INTO ${databaseName}.${tableName}",
      "            (specSheet)",
      "          VALUES",
      "            ($specSheet)",
      "",
      "  sqlQuery_specSheet_byId:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Sql",
      "      connection: !ref sqlConnection_MariaDb",
      "      read:",
      "        query: !sub \"SELECT specSheet FROM ${databaseName}.${tableName} WHERE (JSON_VALUE(specSheet,",
      "          '$.id')=$id)\"",
      "",
      "#  info:",
      "#    type: Cybus::Mapping",
      "#    properties:",
      "#      mappings:",
      "#        - subscribe:",
      "#            endpoint: !ref sqlQuery_LastEntry",
      "#          publish:",
      "#            topic: database/qa_data/fieldMerge",
      "#          rules:",
      "#            - transform:",
      "#                expression: |",
      "#                  {",
      "#                    \"timestamp\": timestamp,",
      "#                    \"value\": value[0]",
      "#                  }",
      "#            - cov:",
      "#                key: value",
      "",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "          endpoint: !ref sqlQuery_CountRecords",
      "        publish:",
      "          topic: materialdaten/record-count",
      "      - subscribe:",
      "          topic: materialdaten/sheet-data-input",
      "        publish:",
      "          endpoint: !ref sqlQuery_Insert_Data",
      "      - subscribe:",
      "          topic: materialdaten/request-by-id",
      "        publish:",
      "          endpoint: !ref sqlQuery_specSheet_byId",
      "      - subscribe:",
      "          endpoint: !ref sqlQuery_specSheet_byId",
      "        publish:",
      "          topic: materialdaten/response-by-id",
      "        rules:",
      "        - transform:",
      "            expression: $.value[0].specSheet"
    ],
    "description": "mariadb_write is a mariadb bridge template",
    "isFileTemplate": true
  },
  "mariadb_app_deploy-snippet": {
    "prefix": "snippet:mariadb:app:deploy",
    "body": [
      "description: >",
      "  Service providing MariaDB ",
      "",
      "metadata:",
      "  name: MariaDB Service",
      "  version: 0.0.1",
      "  icon: https://mariadb.org/wp-content/uploads/2019/01/mariadb_org_rgb_v.png",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "resources:",
      "    #----------------------------------------------------------------------------",
      "    # VOLUMES",
      "    #----------------------------------------------------------------------------",
      "",
      "  mariadbVolume:",
      "    type: Cybus::Volume",
      "",
      "    #----------------------------------------------------------------------------",
      "    # INGRESS ROUTES",
      "    #----------------------------------------------------------------------------",
      "",
      "    # MariaDB",
      "  mariadbRoute:",
      "    type: Cybus::IngressRoute",
      "    properties:",
      "      container: !ref mariadb",
      "      type: tcp",
      "      containerPort: 3306",
      "      connectwarePort: 3306",
      "",
      "    #----------------------------------------------------------------------------",
      "    # CONTAINERS",
      "    #----------------------------------------------------------------------------",
      "",
      "  mariadb:",
      "    type: Cybus::Container",
      "    properties:",
      "      image: mariadb:latest",
      "      volumes:",
      "      - !sub '${mariadbVolume}:/var/lib/mariadb'",
      "      environment:",
      "        MARIADB_DATABASE: generic",
      "        MARIADB_ROOT_PASSWORD: admin"
    ],
    "description": "deploy is a mariadb app snippet",
    "isFileTemplate": true
  },
  "s7_resource_endpoint-write-snippet": {
    "prefix": "snippet:s7:resource:endpoint-write",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  writeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: S7",
      "      connection: !ref s7Connection",
      "      write:",
      "        address: DB10,X0.0",
      "",
      "# ----------------------------------------------------------------------------#",
      "# Mapping Resource - S7 Protocol",
      "# ----------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-write is a s7 resource snippet",
    "isFileTemplate": true
  },
  "s7_resource_connection-snippet": {
    "prefix": "snippet:s7:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: S7",
      "      connection:",
      "        host: 192.168.10.60",
      "        port: 102",
      "        rack: 0",
      "        slot: 1",
      "        pollInterval: 1000",
      "",
      "# ----------------------------------------------------------------------------#",
      "# Endpoint Resource - S7 Protocol",
      "# ----------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a s7 resource snippet",
    "isFileTemplate": true
  },
  "s7_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:s7:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  subscribeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: S7",
      "      connection: !ref s7Connection",
      "      subscribe:",
      "        address: DB10,X0.0",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a s7 resource snippet",
    "isFileTemplate": true
  },
  "s7_bridge_read-write-template": {
    "prefix": "template:s7:bridge:read-write",
    "body": [
      "description: >",
      "  S7 Example",
      "",
      "metadata:",
      "  name: S7 Device",
      "",
      "parameters:",
      "  IP_Address:",
      "    type: string",
      "    default: 10.203.60.253",
      "",
      "  Port_Number:",
      "    type: number",
      "    default: 47808",
      "",
      "  Rack_Number:",
      "    type: number",
      "    default: 5",
      "",
      "  Slot_Number:",
      "    type: number",
      "    default: 1",
      "",
      "  Poll_Interval:",
      "    type: integer",
      "    default: 1000",
      "",
      "resources:",
      "# ----------------------------------------------------------------------------#",
      "# Connection Resource - S7 Protocol",
      "# ----------------------------------------------------------------------------#",
      "  s7Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: S7",
      "      connection:",
      "        host: !ref IP_Address",
      "        port: !ref Port_Number",
      "        rack: !ref Rack_Number",
      "        slot: !ref Slot_Number",
      "        pollInterval: !ref Poll_Interval",
      "",
      "# ----------------------------------------------------------------------------#",
      "# Endpoint Resource - S7 Protocol",
      "# ----------------------------------------------------------------------------#",
      "  s7EndpointDB1000:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: S7",
      "      connection: !ref s7Connection",
      "      topic: S7/DB1000/write",
      "      subscribe:",
      "        address: DB10,X0.0",
      "",
      "  s7EndpointDB1000Write:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: S7",
      "      connection: !ref s7Connection",
      "      topic: S7/DB1000/read",
      "      write:",
      "        address: DB10,X0.0"
    ],
    "description": "read-write is a s7 bridge template",
    "isFileTemplate": true
  },
  "s7_edgeToEdge_with_s7-template": {
    "prefix": "template:s7:edgeToEdge:with_s7",
    "body": [
      "description: >",
      "  S7 Example",
      "",
      "metadata:",
      "  name: S7 Device",
      "",
      "resources:",
      "# ----------------------------------------------------------------------------#",
      "# Connection Resource - S7 Protocol",
      "# ----------------------------------------------------------------------------#",
      "  s7Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: S7",
      "      connection:",
      "        host: 192.168.10.60",
      "        port: 102",
      "        rack: 0",
      "        slot: 1",
      "        pollInterval: 1000",
      "",
      "# ----------------------------------------------------------------------------#",
      "# Endpoint Resource - S7 Protocol",
      "# ----------------------------------------------------------------------------#",
      "  s7EndpointDB1000:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: S7",
      "      connection: !ref s7Connection",
      "      subscribe:",
      "        address: DB10,X0.0",
      "",
      "  s7EndpointDB1000Write:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: S7",
      "      connection: !ref s7Connection",
      "      write:",
      "        address: DB10,X0.0",
      "",
      "# ----------------------------------------------------------------------------#",
      "# Mapping Resource - S7 Protocol",
      "# ----------------------------------------------------------------------------#",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "          endpoint: !ref s7EndpointDB1000",
      "        publish:",
      "          topic: !sub '${Cybus::MqttRoot}/DB1000'",
      "      - subscribe:",
      "          topic: !sub '${Cybus::MqttRoot}/DB1000/set'",
      "        publish:",
      "          endpoint: !ref s7EndpointDB1000Write"
    ],
    "description": "with_s7 is a s7 edgeToEdge template",
    "isFileTemplate": true
  },
  "testing_edgeToEdge_minimal_clock-template": {
    "prefix": "template:testing:edgeToEdge:minimal_clock",
    "body": [
      "description: >",
      "  Minimal Clock Mapping",
      "metadata:",
      "  name: Minimal Clock Mapping",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 1.0.0",
      "parameters:",
      "  azureStorageHost:",
      "    description: Host name of the Azure Blob Storage resource",
      "    type: string",
      "    default: sttesaanalyticsdev.blob.core.windows.net",
      "",
      "resources:",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "          topic: $SYS/+/mqtt/subscribe/received",
      "        publish:",
      "          topic: clock/0.2Hz",
      "        rules:",
      "        - transform:",
      "            expression: $now()"
    ],
    "description": "minimal_clock is a testing edgeToEdge template",
    "isFileTemplate": true
  },
  "opcua_resource_endpoint-write-snippet": {
    "prefix": "snippet:opcua:resource:endpoint-write",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  writeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      write:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"Station_TeilID\".\"112020V01AE1\"",
      "        datatype: String",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  connectionServiceId:",
      "    type: string",
      "    default: PZ_OPCUA_Connection_KAMOB01",
      "  nodeIdtype:",
      "    type: string",
      "    default: 112020V01_Vergleich_SD",
      "",
      "#----------------------------------------------------------------------------",
      "# ENDPOINTS",
      "#----------------------------------------------------------------------------",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-write is a opcua resource snippet",
    "isFileTemplate": true
  },
  "opcua_resource_connection_tls-template": {
    "prefix": "template:opcua:resource:connection_tls",
    "body": [
      "#------------------------------------------------------------------------------",
      "# Meta Data",
      "#------------------------------------------------------------------------------",
      "description: |",
      "  OPCUA Client Connection to OPC-UA Server",
      "metadata:",
      "  name: Connection OPCUA",
      "  version: 1.0.0",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Parameters",
      "#------------------------------------------------------------------------------",
      "parameters:",
      "  opcua_host:",
      "    type: string",
      "    description: OPC UA Host Address",
      "    default: 1.2.3.4",
      "  opcua_port:",
      "    type: integer",
      "    description: OPC UA Host Port",
      "    default: 4840",
      "",
      "  opcua_username:",
      "    type: string",
      "    description: OPC Username",
      "    default: user",
      "  opcua_password:",
      "    type: string",
      "    description: OPC Password",
      "    default: password123",
      "",
      "  opcua_security_policy:",
      "    type: string",
      "    description: OPC SecurityPolicy",
      "    default: Basic256Sha256",
      "",
      "  opcua_security_mode:",
      "    type: string",
      "    description: OPC SecurityPolicy",
      "    default: SignAndEncrypt",
      "",
      "  opcua_cert_file:",
      "    type: string",
      "    description: Client Certificate File",
      "    default: /connectware_certs/cybus_client.crt",
      "",
      "  opcua_key_file:",
      "    type: string",
      "    description: Client Key File",
      "    default: /connectware_certs/cybus_client.key",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Resources",
      "#------------------------------------------------------------------------------",
      "resources:",
      "  opcua_connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Opcua",
      "      connection:",
      "        host: !ref opcua_host",
      "        port: !ref opcua_port",
      "        username: !ref opcua_username",
      "        password: !ref opcua_password",
      "        certificateFile: !ref opcua_cert_file",
      "        privateKeyFile: !ref opcua_key_file",
      "        options:",
      "          securityPolicy: !ref opcua_security_policy",
      "          messageSecurityMode: !ref opcua_security_mode"
    ],
    "description": "connection_tls is a opcua resource template",
    "isFileTemplate": true
  },
  "opcua_resource_endpoint-read-snippet": {
    "prefix": "snippet:opcua:resource:endpoint-read",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  readEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      read:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"DatenSendenOTIT\"",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  connectionServiceId:",
      "    type: string",
      "  nodeIdtype:",
      "    type: string",
      "    default: 212620V01_SD",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-read is a opcua resource snippet",
    "isFileTemplate": true
  },
  "opcua_resource_connection-snippet": {
    "prefix": "snippet:opcua:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Opcua",
      "      connection:",
      "        host: !ref opcuaHost",
      "        port: !ref opcuaPort",
      "        username: !ref opcuaUser",
      "        password: !ref opcuaPass",
      "",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  opcuaHost:",
      "    type: string",
      "    description: OPC-UA Host",
      "    default: 192.168.100.170",
      "",
      "  opcuaPort:",
      "    type: integer",
      "    default: 4990",
      "",
      "  opcuaUser:",
      "    type: string",
      "    default: ''",
      "",
      "  opcuaPass:",
      "    type: string",
      "    default: ''",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a opcua resource snippet",
    "isFileTemplate": true
  },
  "opcua_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:opcua:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  subscribeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      topic: FullBatchRecord",
      "      protocol: Opcua",
      "      connection: !ref opcuaConnection",
      "      subscribe:",
      "        nodeId: ns=11;s=BatchRecord#[NODERED]BatchRecord",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a opcua resource snippet",
    "isFileTemplate": true
  },
  "opcua_resource_connection_tls-snippet": {
    "prefix": "snippet:opcua:resource:connection_tls",
    "body": [
      "#------------------------------------------------------------------------------",
      "# !!! Move me under parameteres section",
      "#------------------------------------------------------------------------------",
      "opcua_host:",
      "  type: string",
      "  description: OPC UA Host Address",
      "  default: 1.2.3.4",
      "opcua_port:",
      "  type: integer",
      "  description: OPC UA Host Port",
      "  default: 4840",
      "",
      "opcua_username:",
      "  type: string",
      "  description: OPC Username",
      "  default: user",
      "opcua_password:",
      "  type: string",
      "  description: OPC Password",
      "  default: password123",
      "",
      "opcua_security_policy:",
      "  type: string",
      "  description: OPC SecurityPolicy",
      "  default: Basic256Sha256",
      "",
      "opcua_security_mode:",
      "  type: string",
      "  description: OPC SecurityPolicy",
      "  default: SignAndEncrypt",
      "",
      "opcua_cert_file:",
      "  type: string",
      "  description: Client Certificate File",
      "  default: /connectware_certs/cybus_client.crt",
      "",
      "opcua_key_file:",
      "  type: string",
      "  description: Client Key File",
      "  default: /connectware_certs/cybus_client.key",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# !!! Move me under resources section",
      "#------------------------------------------------------------------------------",
      "opcua_connection:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Opcua",
      "    connection:",
      "      host: !ref opcua_host",
      "      port: !ref opcua_port",
      "      username: !ref opcua_username",
      "      password: !ref opcua_password",
      "      certificateFile: !ref opcua_cert_file",
      "      privateKeyFile: !ref opcua_key_file",
      "      options:",
      "        securityPolicy: !ref opcua_security_policy",
      "        messageSecurityMode: !ref opcua_security_mode"
    ],
    "description": "connection_tls is a opcua resource snippet",
    "isFileTemplate": true
  },
  "opcua_bridge_write-array-template": {
    "prefix": "template:opcua:bridge:write-array",
    "body": [
      "description: >",
      "  OPC UA Write Array",
      "",
      "metadata:",
      "",
      "  name: OPC UA Write Array",
      "  version: 0.0.1",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "parameters:",
      "",
      "  opcuaHost:",
      "    type: string",
      "    description: OPC UA Host Address",
      "    default: opcuaserver.com",
      "",
      "  opcuaPort:",
      "    type: integer",
      "    description: OPC UA Host Port",
      "    default: 48010",
      "",
      "resources:",
      "",
      "  opcuaConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Opcua",
      "      connection:",
      "        host: !ref opcuaHost",
      "        port: !ref opcuaPort",
      "        #username: myUsername",
      "        #password: myPassword",
      "        checkHostReachable: true",
      "",
      "  writeIntArray:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref opcuaConnection",
      "      topic: writeIntArray",
      "      write:",
      "        nodeId: ns=2;s=Demo.Static.Arrays.Int16",
      "",
      "  writeStringArray:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref opcuaConnection",
      "      topic: writeStringArray",
      "      write:",
      "        nodeId: ns=2;s=Demo.Static.Arrays.String",
      "",
      "  writeStructArray:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref opcuaConnection",
      "      topic: writeStructArray",
      "      write:",
      "        nodeId: ns=2;s=Demo.Static.Arrays.Structure"
    ],
    "description": "write-array is a opcua bridge template",
    "isFileTemplate": true
  },
  "opcua_bridge_read-array-template": {
    "prefix": "template:opcua:bridge:read-array",
    "body": [
      "description: >",
      "  OPC UA Array Minimal",
      "metadata:",
      "",
      "  name: Int 64 OPC UA Array Minimal",
      "  version: 1.0.0",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "parameters:",
      "",
      "  opcuaHost:",
      "    type: string",
      "    description: OPC UA Host Address",
      "    default: opcuaserver.com",
      "",
      "  opcuaPort:",
      "    type: integer",
      "    description: OPC UA Host Port",
      "    default: 48010",
      "",
      "resources:",
      "",
      "  opcuaConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Opcua",
      "      connection:",
      "        host: !ref opcuaHost",
      "        port: !ref opcuaPort",
      "        #username: myUsername",
      "        #password: myPassword",
      "",
      "  Int64Array:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref opcuaConnection",
      "      topic: Int64Array",
      "      retain: true",
      "      subscribe:",
      "        nodeId: ns=2;s=Demo.Static.Arrays.Int64",
      "",
      "  UInt64Array:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref opcuaConnection",
      "      topic: UInt64Array",
      "      retain: true",
      "      subscribe:",
      "        nodeId: ns=2;s=Demo.Static.Arrays.UInt64"
    ],
    "description": "read-array is a opcua bridge template",
    "isFileTemplate": true
  },
  "opcua_bridge_read-template": {
    "prefix": "template:opcua:bridge:read",
    "body": [
      "#------------------------------------------------------------------------------",
      "# Meta Data",
      "#------------------------------------------------------------------------------",
      "description: |",
      "  Receiving implementation of ",
      "  PredefinedModel",
      "metadata:",
      "  name: Receive OPC PredefinedModel",
      "  version: 1.0.0",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Parameters",
      "#------------------------------------------------------------------------------",
      "parameters:",
      "  opcua_connection_service_id:",
      "    type: string",
      "    description: Service ID from Connectware",
      "    default: connection_opcua_",
      "",
      "  identifier_param:",
      "    type: string",
      "    description: Global Object Identifier",
      "    default: '1234567890'",
      "",
      "  node_id_identifier:",
      "    type: string",
      "    description: OPC-UA Node ID to Identifier Block",
      "    default: ns=8;s=\"Objects\".\"Machines\".\"ManufacturingLine1\".\"Identification\".\"AssetId\"",
      "",
      "  node_id_data:",
      "    type: string",
      "    description: OPC-UA Node ID to Identifier Block",
      "    default: ns=8;s=\"Objects\".\"Machines\".\"ManufacturingLine1\".\"Data\"",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Constants",
      "#------------------------------------------------------------------------------",
      "definitions:",
      "  PUBLISH_INTERVAL: 1000",
      "  SAMPLING_INTERVAL: 1000",
      "  PUBLISH_INTERVAL_CONSTANTS: 2000",
      "  SAMPLING_INTERVAL_CONSTANTS: 2000",
      "  MAX_NOTIFICATIONS_PER_PUBLISH: 10",
      "  MODEL_NAME: PredefinedModel",
      "  FILTER_ENDPOINT_COUNT: 3",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Endpoint Attribute",
      "#------------------------------------------------------------------------------",
      "resources:",
      "",
      "  endpoint_itemState:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref '${opcua_connection_service_id}::opcua_connection'",
      "      topic: !sub '${MODEL_NAME}/nodes/couldBeState'",
      "      subscribe:",
      "        nodeId: !sub '${node_id_data}.\"CouldBeState\".\"CurrentState\"'",
      "        publishInterval: !ref PUBLISH_INTERVAL",
      "        samplingInterval: !ref SAMPLING_INTERVAL",
      "        maxNotificationsPerPublish: !ref MAX_NOTIFICATIONS_PER_PUBLISH",
      "",
      "  endpoint_operationMode:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref '${opcua_connection_service_id}::opcua_connection'",
      "      topic: !sub '${MODEL_NAME}/nodes/couldBeOperationMode'",
      "      subscribe:",
      "        nodeId: !sub '${node_id_data}.\"CouldBeOperationMode\".\"CurrentState\"'",
      "        publishInterval: !ref PUBLISH_INTERVAL",
      "        samplingInterval: !ref SAMPLING_INTERVAL",
      "        maxNotificationsPerPublish: !ref MAX_NOTIFICATIONS_PER_PUBLISH",
      "",
      "  endpoint_Identifier:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref '${opcua_connection_service_id}::opcua_connection'",
      "      topic: !sub '${MODEL_NAME}/nodes/identifier'",
      "      subscribe:",
      "        nodeId: !sub '${node_id_identifier}'",
      "        publishInterval: !ref PUBLISH_INTERVAL_CONSTANTS",
      "        samplingInterval: !ref SAMPLING_INTERVAL_CONSTANTS",
      "        maxNotificationsPerPublish: !ref MAX_NOTIFICATIONS_PER_PUBLISH",
      "",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "        - topic: !sub '${Cybus::MqttRoot}/${MODEL_NAME}/nodes/+subnode'",
      "          label: '{subnode}'",
      "        rules:",
      "        - collect: {}",
      "        - filter:",
      "            expression: !sub |",
      "              $keys($) ~> $count = ${FILTER_ENDPOINT_COUNT}",
      "        - transform:",
      "            expression: !sub |",
      "              {",
      "                \"operationMode\": $.operationMode.value,",
      "                \"itemState\": $.itemState.value,",
      "                \"timestamp\": $max(*.timestamp),",
      "                \"identifier\": \"${identifier_param}\"",
      "              }",
      "",
      "        publish:",
      "            # Publish combined data to connectware",
      "          topic: !sub '${Cybus::MqttRoot}/${MODEL_NAME}/combined'"
    ],
    "description": "read is a opcua bridge template",
    "isFileTemplate": true
  },
  "opcua_bridge_read-events-template": {
    "prefix": "template:opcua:bridge:read-events",
    "body": [
      "description: >",
      "  OPC UA Events minimal",
      "",
      "metadata:",
      "",
      "  name: OPC UA Events minimal",
      "  version: 0.0.1",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "parameters:",
      "",
      "  opcuaHost:",
      "    type: string",
      "    description: OPC UA Host Address",
      "    default: uademo.prosysopc.com",
      "",
      "  opcuaPort:",
      "    type: integer",
      "    description: OPC UA Host Port",
      "    default: 53530",
      "",
      "  opcuaResourcePath:",
      "    type: string",
      "    description: OPC UA Host Resource Path",
      "    default: /OPCUA/SimulationServer",
      "",
      "resources:",
      "",
      "  opcuaConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Opcua",
      "      connection:",
      "        host: !ref opcuaHost",
      "        port: !ref opcuaPort",
      "        #username: myUsername",
      "        #password: myPassword",
      "        resourcePath: !ref opcuaResourcePath",
      "        checkHostReachable: true",
      "",
      "  MyLevelAlarm:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      topic: MyLevelAlarm",
      "      connection: !ref opcuaConnection",
      "      subscribe:",
      "        nodeId: ns=6;s=MyLevel.Alarm",
      "        eventTypes:",
      "        - i=9482",
      "        fields:",
      "        - EventType",
      "        - Message",
      "        - Severity",
      "        - SourceName",
      "        - ReceiveTime"
    ],
    "description": "read-events is a opcua bridge template",
    "isFileTemplate": true
  },
  "opcua_edgeToEdge_handshake-to_opcua-template": {
    "prefix": "template:opcua:edgeToEdge:handshake-to_opcua",
    "body": [
      "#----------------------------------------------------------------------------",
      "# CHANGELOG OPC UA Handshake",
      "#----------------------------------------------------------------------------",
      "# 1.0.5     First stable Version",
      "# 1.0.6     Modularization of Commissioning File (split between connection and resources)",
      "# 1.0.7     Making sure that a value of OPC UA Variable AppData exists",
      "# 1.0.8     Introducing cyclic reading of ReqId to avoid deadlock",
      "",
      "#----------------------------------------------------------------------------",
      "# CYBUS SERVICE COMMISSIONING",
      "#----------------------------------------------------------------------------",
      "description: !sub |",
      "  OPC UA Handshake for Device Connection to influxDB",
      "  ${deviceType} - ${deviceId}",
      "",
      "metadata:",
      "  name: PZ_OPCUA_Handshake",
      "  version: 1.0.8",
      "#------------------------------------------------------------------------------",
      "# Definitions",
      "#------------------------------------------------------------------------------",
      "definitions:",
      "  samplingIntervalMs: 1000",
      "  publishIntervalMs: 1000",
      "",
      "#------------------------------------------------------------------------------",
      "# Parameters",
      "#------------------------------------------------------------------------------",
      "parameters:",
      "  connectionServiceId:",
      "    type: string",
      "  nodeIdtype:",
      "    type: string",
      "    default: 212620V01_SD",
      "  plantId:",
      "    type: string",
      "    default: PZ",
      "  deviceType:",
      "    type: string",
      "    default: PLC 1517F-3 PN/DP",
      "  manufacturerId:",
      "    type: string",
      "    default: Siemens AG",
      "  deviceId:",
      "    type: string",
      "    default: KAMOB02-----BS1---KFU1",
      "  measurementType:",
      "    type: string",
      "    default: station measurements",
      "  # username:",
      "  #   type: string",
      "  #   default: ''",
      "  # password:",
      "  #   type: string",
      "  #   default: ''",
      "",
      "#----------------------------------------------------------------------------",
      "# ENDPOINTS",
      "#----------------------------------------------------------------------------",
      "resources:",
      "  ReqId:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      subscribe:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"DatenSendenOTIT\".\"Header\".\"ReqID\"",
      "",
      "  ReqIdRead:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      read:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"DatenSendenOTIT\".\"Header\".\"ReqID\"",
      "      rules:",
      "      - transform:",
      "          expression: '{\"value\": $.value.value}'",
      "",
      "  ServerTime:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      subscribe:",
      "        nodeId: ns=0;i=2258",
      "        samplingInterval: 30000",
      "",
      "  AppData:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      read:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"DatenSendenOTIT\"",
      "",
      "  AckId:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      write:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"DatenSendenOTIT\".\"Header\".\"AckID\"",
      "        datatype: String",
      "",
      "        ",
      "#----------------------------------------------------------------------------",
      "# MAPPINGS",
      "#----------------------------------------------------------------------------",
      "  publicApi:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "        - endpoint: !ref ReqId",
      "        - endpoint: !ref ReqIdRead",
      "        publish:",
      "          endpoint: !ref AppData",
      "        rules:",
      "        - cov:",
      "            key: value",
      "      - subscribe:",
      "          endpoint: !ref AppData",
      "        publish:",
      "          topic: services/influxdb/writeData/set",
      "        rules:",
      "            # convert char[] to ASCII",
      "        - transform:",
      "                # remove \"36\": \"$\" and change 35 to $ to prevent topicError while using #",
      "            expression: |",
      "              (",
      "                $assert($exists(value.value), \"OPC UA variable AppData returned no value\");",
      "",
      "                $ascii := {",
      "                    \"31\": \"\",      \"32\": \" \",     \"33\": \"!\",     \"34\": \"\\\"\",    \"35\": \"$\",    ",
      "                                   \"37\": \"%\",     \"38\": \"&\",     \"39\": \"'\",     \"40\": \"(\",    ",
      "                    \"41\": \")\",     \"42\": \"*\",     \"43\": \"+\",     \"44\": \",\",     \"45\": \"-\",    ",
      "                    \"46\": \".\",     \"47\": \"/\",     \"48\": \"0\",     \"49\": \"1\",     \"50\": \"2\",    ",
      "                    \"51\": \"3\",     \"52\": \"4\",     \"53\": \"5\",     \"54\": \"6\",     \"55\": \"7\",    ",
      "                    \"56\": \"8\",     \"57\": \"9\",     \"58\": \":\",     \"59\": \";\",     \"60\": \"<\",    ",
      "                    \"61\": \"=\",     \"62\": \">\",     \"63\": \"?\",     \"64\": \"@\",     \"65\": \"A\",    ",
      "                    \"66\": \"B\",     \"67\": \"C\",     \"68\": \"D\",     \"69\": \"E\",     \"70\": \"F\",    ",
      "                    \"71\": \"G\",     \"72\": \"H\",     \"73\": \"I\",     \"74\": \"J\",     \"75\": \"K\",    ",
      "                    \"76\": \"L\",     \"77\": \"M\",     \"78\": \"N\",     \"79\": \"O\",     \"80\": \"P\",    ",
      "                    \"81\": \"Q\",     \"82\": \"R\",     \"83\": \"S\",     \"84\": \"T\",     \"85\": \"U\",    ",
      "                    \"86\": \"V\",     \"87\": \"W\",     \"88\": \"X\",     \"89\": \"Y\",     \"90\": \"Z\",    ",
      "                    \"91\": \"[\",     \"92\": \"\\\\\",    \"93\": \"]\",     \"94\": \"^\",     \"95\": \"_\",    ",
      "                    \"96\": \"`\",     \"97\": \"a\",     \"98\": \"b\",     \"99\": \"c\",     \"100\": \"d\",    ",
      "                    \"101\": \"e\",    \"102\": \"f\",    \"103\": \"g\",    \"104\": \"h\",    \"105\": \"i\",    ",
      "                    \"106\": \"j\",    \"107\": \"k\",    \"108\": \"l\",    \"109\": \"m\",    \"110\": \"n\",    ",
      "                    \"111\": \"o\",    \"112\": \"p\",    \"113\": \"q\",    \"114\": \"r\",    \"115\": \"s\",    ",
      "                    \"116\": \"t\",    \"117\": \"u\",    \"118\": \"v\",    \"119\": \"w\",    \"120\": \"x\",    ",
      "                    \"121\": \"y\",    \"122\": \"z\",    \"123\": \"{\",    \"124\": \"|\",    \"125\": \"}\",    ",
      "                    \"126\": \"~\",    \"127\": \"\"",
      "                    };",
      "",
      "                $arrPart := $.value.value.header.partID;",
      "                $asciiPartID := $map($arrPart, function ($val) {",
      "                    $toAscii := $lookup($ascii, $string($val))",
      "                });",
      "",
      "                $merge([$.value.value, {\"partID\": $join($asciiPartID)}]);",
      "              )",
      "            # transform raw AppData to PPMP",
      "        - transform:",
      "            expression: !sub |",
      "              (",
      "                {",
      "                  \"content-spec\": \"urn:spec://eclipse.org/unide/process-message#v3\",",
      "                  \"device\": {",
      "                      \"id\": \"${deviceId}\",",
      "                      \"additionalData\": {",
      "                        \"plant\": \"${plantId}\",",
      "                        \"manufacturer\": \"${manufacturerId}\",",
      "                        \"hwType\": \"${deviceType}\",",
      "                        \"swVersionPPMP\": \"3.0.1\"",
      "                      }",
      "                  },",
      "                  \"measurements\": [",
      "                    {",
      "                        \"name\": \"${measurementType}\",",
      "                        \"ts\": $now(),",
      "                        \"additionalData\":{",
      "                          \"origin\": \"PLC/1\", ",
      "                          \"nodeIdtype\" : \"${nodeIdtype}\"",
      "                        },",
      "                        \"specialValues\": $",
      "                    }",
      "                  ], ",
      "                  \"part\": {",
      "                        \"id\": $.partID",
      "                   }",
      "                }",
      "              )   ",
      "        - transform:",
      "            expression: |",
      "              (",
      "                {",
      "                    \"measurement\": \"ProcessMessage-V3\",",
      "                    \"tags\":{",
      "                        \"id\": $.device.id,",
      "                        \"manufacturer\": $.device.additionalData.manufacturer,",
      "                        \"partId\": $.part.id,",
      "                        \"stationId\": $.measurements[0].additionalData.nodeIdtype",
      "                    },",
      "                    \"fields\": {",
      "                        \"code\": $.measurements[0].name,",
      "                        \"state\": $.measurements[0].additionalData.nodeIdtype,",
      "                        \"messageAsString\": $string($)",
      "                    },",
      "                    \"timestamp\": $toMillis($.measurements[0].ts)",
      "                }",
      "              )                    ",
      "        # get response from eagle",
      "      - subscribe:",
      "        - endpoint: !ref ReqId",
      "        - endpoint: !ref ReqIdRead",
      "        publish:",
      "            # write reqID as ackId to plc",
      "          endpoint: !ref AckId",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"value\": $each($.value, function($v) {$v & ''})",
      "              }",
      "        # trigger read of ReqId everytime when the ServerTime is updated",
      "      - subscribe:",
      "          endpoint: !ref ServerTime",
      "        publish:",
      "          endpoint: !ref ReqIdRead"
    ],
    "description": "handshake-to_opcua is a opcua edgeToEdge template",
    "isFileTemplate": true
  },
  "opcua_edgeToEdge_quality_check-from_influxdb-template": {
    "prefix": "template:opcua:edgeToEdge:quality_check-from_influxdb",
    "body": [
      "#----------------------------------------------------------------------------",
      "# CHANGELOG Stack Quality Gate",
      "#----------------------------------------------------------------------------",
      "# 0.0.1 Prototype",
      "",
      "#----------------------------------------------------------------------------",
      "# CYBUS SERVICE COMMISSIONING",
      "#----------------------------------------------------------------------------",
      "description: !sub |",
      "  Quality Gate for Stack assembly",
      "",
      "metadata:",
      "  name: QualityGate",
      "  version: 0.0.1",
      "",
      "#------------------------------------------------------------------------------",
      "# Parameters",
      "#------------------------------------------------------------------------------",
      "parameters:",
      "  opcuaConnectionServiceId:",
      "    type: string",
      "    default: OPCUA_Connection_KASTB0241125",
      "  opcuaStructureNode:",
      "    type: string",
      "    default: 241125V01_Vergleich_SD",
      "  influxDBConnectionServiceId:",
      "    type: string",
      "    default: influxdb",
      "",
      "#----------------------------------------------------------------------------",
      "# ENDPOINTS",
      "#----------------------------------------------------------------------------",
      "resources:",
      "  OpcuaStackIdAusgang:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${opcuaConnectionServiceId}::opcuaConnection\"",
      "      subscribe:",
      "        nodeId: !sub ns=3;s=\"${opcuaStructureNode}\".\"Stack_ID_Ausgang\"",
      "  OpcuaStackIdEingang:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${opcuaConnectionServiceId}::opcuaConnection\"",
      "      write:",
      "        nodeId: !sub ns=3;s=\"${opcuaStructureNode}\".\"Stack_ID_Eingang\"",
      "  InfluxDbReadStackData:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Influxdb",
      "      connection: !ref \"${influxDBConnectionServiceId}::influxdbConnection\"",
      "      read:",
      "        query: |",
      "          from(bucket: \"FIBAT\")",
      "          |> range(start: @startDate)",
      "          |> filter(fn: (r) => r[\"partId\"] == \"@stackIdPad\" or r[\"partId\"] == \"@stackId\")",
      "          |> filter(fn: (r) => r[\"_field\"] == \"messageAsString\")",
      "          |> filter(fn: (r) => r[\"_measurement\"] == \"ProcessMessage-V3\")",
      "  InfluxDbReadAllData:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Influxdb",
      "      connection: !ref \"${influxDBConnectionServiceId}::influxdbConnection\"",
      "      read:",
      "        query: |",
      "          from(bucket: \"FIBAT\")",
      "          |> range(start: @startDate)",
      "          |> filter(fn: (r) => r[\"partId\"] == \"@stackIdPad\" or r[\"partId\"] == \"@stackId\" or r[\"partId\"] == \"@cellId0\" or r[\"partId\"] == \"@cellId1\" or r[\"partId\"] == \"@cellId2\" or r[\"partId\"] == \"@cellId3\" or r[\"partId\"] == \"@cellId4\" or r[\"partId\"] == \"@cellId5\" or r[\"partId\"] == \"@cellId6\" or r[\"partId\"] == \"@cellId7\")",
      "          |> filter(fn: (r) => r[\"_field\"] == \"messageAsString\")",
      "          |> filter(fn: (r) => r[\"_measurement\"] == \"ProcessMessage-V3\")",
      "",
      "",
      "#----------------------------------------------------------------------------",
      "# MAPPINGS",
      "#----------------------------------------------------------------------------",
      "  dataAvailabilityCheck:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "        # When StackId changes, retrieve all stack related records from InfluxDB",
      "      - subscribe:",
      "          endpoint: !ref OpcuaStackIdAusgang",
      "        publish:",
      "          endpoint: !ref InfluxDbReadStackData",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"startDate\": \"2023-11-20T10:30:00.000000000Z\",",
      "                \"stackId\": value,",
      "                \"stackIdPad\": $string($join($append(value,\"        \")))",
      "              }",
      "        # When Stack records are retrieved, extract all related CellIds and",
      "        # retrieve all stack and cell related records from InfluxDB",
      "      - subscribe:",
      "          endpoint: !ref InfluxDbReadStackData",
      "        publish:",
      "          endpoint: !ref InfluxDbReadAllData",
      "        rules:",
      "        - transform:",
      "                # cellIdList in a format \"a|b|c|d...\"",
      "            expression: |",
      "              (",
      "                /* ascii lookup table */",
      "                $ascii := {",
      "                            \"31\": \"\",      \"32\": \" \",     \"33\": \"!\",     \"34\": \"\\\"\",    \"35\": \"$\",    ",
      "                                          \"37\": \"%\",     \"38\": \"&\",     \"39\": \"'\",     \"40\": \"(\",    ",
      "                            \"41\": \")\",     \"42\": \"*\",     \"43\": \"+\",     \"44\": \",\",     \"45\": \"-\",    ",
      "                            \"46\": \".\",     \"47\": \"/\",     \"48\": \"0\",     \"49\": \"1\",     \"50\": \"2\",    ",
      "                            \"51\": \"3\",     \"52\": \"4\",     \"53\": \"5\",     \"54\": \"6\",     \"55\": \"7\",    ",
      "                            \"56\": \"8\",     \"57\": \"9\",     \"58\": \":\",     \"59\": \";\",     \"60\": \"<\",    ",
      "                            \"61\": \"=\",     \"62\": \">\",     \"63\": \"?\",     \"64\": \"@\",     \"65\": \"A\",    ",
      "                            \"66\": \"B\",     \"67\": \"C\",     \"68\": \"D\",     \"69\": \"E\",     \"70\": \"F\",    ",
      "                            \"71\": \"G\",     \"72\": \"H\",     \"73\": \"I\",     \"74\": \"J\",     \"75\": \"K\",    ",
      "                            \"76\": \"L\",     \"77\": \"M\",     \"78\": \"N\",     \"79\": \"O\",     \"80\": \"P\",    ",
      "                            \"81\": \"Q\",     \"82\": \"R\",     \"83\": \"S\",     \"84\": \"T\",     \"85\": \"U\",    ",
      "                            \"86\": \"V\",     \"87\": \"W\",     \"88\": \"X\",     \"89\": \"Y\",     \"90\": \"Z\",    ",
      "                            \"91\": \"[\",     \"92\": \"\\\\\",    \"93\": \"]\",     \"94\": \"^\",     \"95\": \"_\",    ",
      "                            \"96\": \"`\",     \"97\": \"a\",     \"98\": \"b\",     \"99\": \"c\",     \"100\": \"d\",    ",
      "                            \"101\": \"e\",    \"102\": \"f\",    \"103\": \"g\",    \"104\": \"h\",    \"105\": \"i\",    ",
      "                            \"106\": \"j\",    \"107\": \"k\",    \"108\": \"l\",    \"109\": \"m\",    \"110\": \"n\",    ",
      "                            \"111\": \"o\",    \"112\": \"p\",    \"113\": \"q\",    \"114\": \"r\",    \"115\": \"s\",    ",
      "                            \"116\": \"t\",    \"117\": \"u\",    \"118\": \"v\",    \"119\": \"w\",    \"120\": \"x\",    ",
      "                            \"121\": \"y\",    \"122\": \"z\",    \"123\": \"{\",    \"124\": \"|\",    \"125\": \"}\",    ",
      "                            \"126\": \"~\",    \"127\": \"\"",
      "                          };",
      "",
      "                /* function transforms char arrays into strings */",
      "                $parse := function($charArray) { ",
      "                    $map($charArray, function ($val) {",
      "                        $lookup($ascii, $string($val))",
      "                    }) ~> $join()",
      "                };",
      "",
      "",
      "                $stack := $[stationId = \"121040V01_SD\"].partId;",
      "                /*23 - one whitespace / 30 - true whitespace*/",
      "                $stackPad := $pad($[stationId = \"121040V01_SD\"].partId, 23);",
      "",
      "                /*get Cell Ids from 1040*/",
      "                $cellIdArray1040 := $[stationId = \"121040V01_SD\"]._value.$eval($).measurements.specialValues.nutzdaten.$sift(function($v, $k) {$k ~> /_idNr/});",
      "                /*get Cell Ids from 1042*/",
      "                $cellIdArray1042 := $[stationId = \"121042V01_SD\"]._value.$eval($).measurements.specialValues.nutzdaten.$sift(function($v, $k) {$k ~> /_idNr/});",
      "                /*merge Cell Ids 1-8 and convert them to ASCII*/",
      "                $cellIds := $each($merge($append($cellIdArray1042, $cellIdArray1040)), $parse);",
      "",
      "                /*join into string by | character*/",
      "                $cellIdsStr := $cellIds ~> $join(\"|\");",
      "                /*add | character at the end of the string*/",
      "                $cellIdsStr := $pad($cellIdsStr, 96,\"|\");",
      "                /*add | character on the front of the string*/",
      "                $cellIdsStr := $pad($cellIdsStr,-97,\"|\");",
      "",
      "",
      "                /*Old code by Marius not using stationIds - could cause stack overflow*/",
      "                /* transform json strings into objects */",
      "                /*$values := _value.$eval($);*/",
      "                /* extract objects containing cell ids */",
      "                /*$nutzdaten := $merge($values.measurements.specialValues.nutzdaten);*/",
      "                /* filter keys matching _idNr pattern */",
      "                /*$cellIdArrays := $nutzdaten.$sift(function($v, $k) {$k ~> /_idNr/});*/",
      "                /* parse cell Ids */",
      "                /*$cellIds := $each($cellIdArrays, $parse);*/",
      "",
      "                {",
      "                    \"startDate\": \"2023-11-20T10:30:00.000000000Z\",",
      "                    \"stackId\": $stack,",
      "                    \"stackIdPad\": $string($join($append($stack,\"        \"))),",
      "                    \"cellIdList\": $cellIdsStr,",
      "                    \"cellId0\" : $cellIds[0],",
      "                    \"cellId1\" : $cellIds[1],",
      "                    \"cellId2\" : $cellIds[2],",
      "                    \"cellId3\" : $cellIds[3],",
      "                    \"cellId4\" : $cellIds[4],",
      "                    \"cellId5\" : $cellIds[5],",
      "                    \"cellId6\" : $cellIds[6],",
      "                    \"cellId7\" : $cellIds[7]",
      "                }",
      "              )",
      "        # When all relevant records are retrieved, evaluate data and respond to PLC",
      "      - subscribe:",
      "          endpoint: !ref InfluxDbReadAllData",
      "        publish:",
      "          endpoint: !ref OpcuaStackIdEingang",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              (",
      "                /* ascii lookup table */",
      "                $ascii := {",
      "                            \"31\": \"\",      \"32\": \" \",     \"33\": \"!\",     \"34\": \"\\\"\",    \"35\": \"$\",    ",
      "                                          \"37\": \"%\",     \"38\": \"&\",     \"39\": \"'\",     \"40\": \"(\",    ",
      "                            \"41\": \")\",     \"42\": \"*\",     \"43\": \"+\",     \"44\": \",\",     \"45\": \"-\",    ",
      "                            \"46\": \".\",     \"47\": \"/\",     \"48\": \"0\",     \"49\": \"1\",     \"50\": \"2\",    ",
      "                            \"51\": \"3\",     \"52\": \"4\",     \"53\": \"5\",     \"54\": \"6\",     \"55\": \"7\",    ",
      "                            \"56\": \"8\",     \"57\": \"9\",     \"58\": \":\",     \"59\": \";\",     \"60\": \"<\",    ",
      "                            \"61\": \"=\",     \"62\": \">\",     \"63\": \"?\",     \"64\": \"@\",     \"65\": \"A\",    ",
      "                            \"66\": \"B\",     \"67\": \"C\",     \"68\": \"D\",     \"69\": \"E\",     \"70\": \"F\",    ",
      "                            \"71\": \"G\",     \"72\": \"H\",     \"73\": \"I\",     \"74\": \"J\",     \"75\": \"K\",    ",
      "                            \"76\": \"L\",     \"77\": \"M\",     \"78\": \"N\",     \"79\": \"O\",     \"80\": \"P\",    ",
      "                            \"81\": \"Q\",     \"82\": \"R\",     \"83\": \"S\",     \"84\": \"T\",     \"85\": \"U\",    ",
      "                            \"86\": \"V\",     \"87\": \"W\",     \"88\": \"X\",     \"89\": \"Y\",     \"90\": \"Z\",    ",
      "                            \"91\": \"[\",     \"92\": \"\\\\\",    \"93\": \"]\",     \"94\": \"^\",     \"95\": \"_\",    ",
      "                            \"96\": \"`\",     \"97\": \"a\",     \"98\": \"b\",     \"99\": \"c\",     \"100\": \"d\",    ",
      "                            \"101\": \"e\",    \"102\": \"f\",    \"103\": \"g\",    \"104\": \"h\",    \"105\": \"i\",    ",
      "                            \"106\": \"j\",    \"107\": \"k\",    \"108\": \"l\",    \"109\": \"m\",    \"110\": \"n\",    ",
      "                            \"111\": \"o\",    \"112\": \"p\",    \"113\": \"q\",    \"114\": \"r\",    \"115\": \"s\",    ",
      "                            \"116\": \"t\",    \"117\": \"u\",    \"118\": \"v\",    \"119\": \"w\",    \"120\": \"x\",    ",
      "                            \"121\": \"y\",    \"122\": \"z\",    \"123\": \"{\",    \"124\": \"|\",    \"125\": \"}\",    ",
      "                            \"126\": \"~\",    \"127\": \"\"",
      "                        };",
      "",
      "                /* function transforms char arrays into strings */",
      "                $parse := function($charArray) { ",
      "                    $map($charArray, function ($val) {",
      "                        $lookup($ascii, $string($val))",
      "                    }) ~> $join()",
      "                };",
      "",
      "",
      "                $stackstationidcheck := function($stackidcheck, $stationidcheck, $result){",
      "                  $boolean($[stationId = $stationidcheck and partId = $stackidcheck]) ? $result : $join($append($append($append(\"NOKST\",$stationidcheck),\"-\"),$stackidcheck))",
      "                };",
      "",
      "                $stackstationid1125check := function($stackidcheck, $stationidcheck, $result){",
      "                  $boolean($count($[stationId = $stationidcheck and partId = $stackidcheck]) = 2) ? $result : $join($append($append($append(\"NOKST\",$stationidcheck),\"-\"),$stackidcheck))",
      "                };",
      "",
      "                $stackplcidcheck := function($stackidcheck, $plcidcheck, $result){",
      "                  $boolean($[id = $plcidcheck and partId = $stackidcheck]) ? $result : $join($append($append($append(\"NOKST\",$plcidcheck),\"-\"),$stackidcheck))",
      "                };",
      "",
      "                $stacktoxcheck := function($stackidcheck, $result){",
      "                  $boolean($count($[partId = $stackidcheck and id = \"kastb01-----as1ae3tas1\"]) >= 5) ? $result : $join($append($append($append(\"NOKST\",\"kastb01-----as1ae3tas1\"),\"-\"),$stackidcheck))",
      "                };",
      "",
      "",
      "                $result := $[stationId = \"121040V01_SD\"].partId;",
      "",
      "                $stack := $[stationId = \"121040V01_SD\"].partId;",
      "                /*23 - one whitespace / 30 - true whitespace*/",
      "                $stackPad := $pad($[stationId = \"121040V01_SD\"].partId, 30);",
      "",
      "                /*1040 not empty check*/",
      "                $result := $stackstationidcheck($stack,\"121040V01_SD\",$result);",
      "                /*1042 not empty check - watch out for one whitespace padding at the end of partId*/",
      "                $result := $stackstationidcheck($stackPad,\"121042V01_SD\",$result);",
      "                /*1125 not empty check*/",
      "                $result := $stackstationidcheck($stack,\"241125V01_SD\",$result);",
      "                /*1125 two records check - not used - at least one is enough*/",
      "                /*$stackstationid1125check($stack,\"241125V01_SD\",$result);*/",
      "                /*1120 solin not empty check*/",
      "                $result := $stackplcidcheck($stack,\"PZKASTB0241120---EL1\",$result);",
      "                /*TOX five records check*/",
      "                $result := $stacktoxcheck($stack,$result);",
      "",
      "                /*TOX program id 22 check*/",
      "                $toxarray := $[manufacturer = \"TOX\" and partId = $stack];",
      "                $toxparsed := $map($toxarray, function($v, $i, $a) {$eval($toxarray[$i]._value)});",
      "                $toxprogramarray := $map($toxparsed, function($v, $i, $a) {$toxparsed[$i].process.program.id});",
      "                $toxprogrambool := $map($toxprogramarray, function($v, $i, $a) {$boolean($v = 22)});",
      "                $result := $boolean($toxprogrambool) ? $result : $join($append($append($append(\"NOKST\",\"kastb01-----as1ae3tas1-TOXprogram22\"),\"-\"),$stack));",
      "",
      "                /*get Cell Ids from 1040*/",
      "                $cellIdArray1040 := $[stationId = \"121040V01_SD\" and partId = $stack]._value.$eval($).measurements.specialValues.nutzdaten.$sift(function($v, $k) {$k ~> /_idNr/});",
      "                /*get Cell Ids from 1042*/",
      "                $cellIdArray1042 := $[stationId = \"121042V01_SD\" and partId = $stackPad]._value.$eval($).measurements.specialValues.nutzdaten.$sift(function($v, $k) {$k ~> /_idNr/});",
      "                /*merge Cell Ids 1-8 and convert them to ASCII*/",
      "                $cellIds := $each($merge($append($cellIdArray1042, $cellIdArray1040)), $parse);",
      "",
      "                $cellcheck := function($cellId, $result){",
      "                  $boolean($[stationId = \"111010V01_SD\" and partId = $cellId]) ? $boolean($[stationId = \"111022V01_SD\" and partId = $cellId]) ? $boolean($map($eval($[stationId = \"111010V01_SD\" and partId = $cellId]._value).measurements.specialValues.nutzdaten.gesamt_ID, function($v, $i, $a){ $boolean($v != 32 and $v != 42 and $v != 31)})) ? $result : $join($append($append(\"NOKST111010V01_SD_gesamtID\", \"-\"), $cellId)) : $join($append($append(\"NOKST111022V01_SD\", \"-\"), $cellId)) : $join($append($append(\"NOKST111010V01_SD\", \"-\"), $cellId)) ",
      "                };",
      "",
      "                $result := $cellcheck($cellIds[0],$result);",
      "                $result := $cellcheck($cellIds[1],$result);",
      "                $result := $cellcheck($cellIds[2],$result);",
      "                $result := $cellcheck($cellIds[3],$result);",
      "                $result := $cellcheck($cellIds[4],$result);",
      "                $result := $cellcheck($cellIds[5],$result);",
      "                $result := $cellcheck($cellIds[6],$result);",
      "                $result := $cellcheck($cellIds[7],$result);",
      "",
      "                /*these two are root causes - have to be at the ending*/",
      "                $result := $stackstationidcheck($stackPad,\"121042V01_SD\",$result);",
      "                $result := $stackstationidcheck($stack,\"121040V01_SD\",$result);",
      "",
      "                {",
      "                  \"value\": $result",
      "                }",
      "              )"
    ],
    "description": "quality_check-from_influxdb is a opcua edgeToEdge template",
    "isFileTemplate": true
  },
  "opcua_edgeToEdge_tox_feedback-template": {
    "prefix": "template:opcua:edgeToEdge:tox_feedback",
    "body": [
      "#----------------------------------------------------------------------------",
      "# CHANGELOG TOX MQTT Feedback",
      "#----------------------------------------------------------------------------",
      "# 1.0.0 First stable Version    ",
      "",
      "#----------------------------------------------------------------------------",
      "# CYBUS SERVICE COMMISSIONING",
      "#----------------------------------------------------------------------------",
      "description: !sub |",
      "  OPC UA Feedback for TOX MQTT messages",
      "",
      "metadata:",
      "  name: PZ_OPCUA_Feedback_TOX",
      "  version: 1.0.0",
      "",
      "#------------------------------------------------------------------------------",
      "# Parameters",
      "#------------------------------------------------------------------------------",
      "parameters:",
      "  connectionServiceId:",
      "    type: string",
      "    default: PZ_OPCUA_Connection_KAMOB01",
      "  nodeIdtype:",
      "    type: string",
      "    default: 112020V01_Vergleich_SD",
      "",
      "#----------------------------------------------------------------------------",
      "# ENDPOINTS",
      "#----------------------------------------------------------------------------",
      "resources:",
      "  AE1:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      write:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"Station_TeilID\".\"112020V01AE1\"",
      "        datatype: String",
      "  AE2:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      write:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"Station_TeilID\".\"112020V01AE2\"",
      "        datatype: String",
      "  AE3:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      write:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"Station_TeilID\".\"112020V01AE3\"",
      "        datatype: String",
      "  AE4:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Opcua",
      "      connection: !ref \"${connectionServiceId}::opcuaConnection\"",
      "      write:",
      "        nodeId: !sub ns=3;s=\"${nodeIdtype}\".\"Station_TeilID\".\"112020V01AE4\"",
      "        datatype: String",
      "",
      "        ",
      "#----------------------------------------------------------------------------",
      "# MAPPINGS",
      "#----------------------------------------------------------------------------",
      "  feedback:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "        - topic: PZ/kamob01-----as1ae1kfp1/ProcessMessage",
      "        publish:",
      "          endpoint: !ref AE1",
      "        rules:",
      "        - transform:",
      "            expression: '{\"value\": part.id}'",
      "      - subscribe:",
      "        - topic: PZ/kamob01-----as1ae2kfp1/ProcessMessage",
      "        publish:",
      "          endpoint: !ref AE2",
      "        rules:",
      "        - transform:",
      "            expression: '{\"value\": part.id}'",
      "      - subscribe:",
      "        - topic: PZ/kamob01-----as1ae3kfp1/ProcessMessage",
      "        publish:",
      "          endpoint: !ref AE3",
      "        rules:",
      "        - transform:",
      "            expression: '{\"value\": part.id}'",
      "      - subscribe:",
      "        - topic: PZ/kamob01-----as1ae4kfp1/ProcessMessage",
      "        publish:",
      "          endpoint: !ref AE4",
      "        rules:",
      "        - transform:",
      "            expression: '{\"value\": part.id}'"
    ],
    "description": "tox_feedback is a opcua edgeToEdge template",
    "isFileTemplate": true
  },
  "opcua_edgeToEdge_batch_record-to_mssql-template": {
    "prefix": "template:opcua:edgeToEdge:batch_record-to_mssql",
    "body": [
      "description: >",
      "  Sample MSSQL service commissioning file",
      "",
      "metadata:",
      "  name: MSSQL push service",
      "  icon: https://www.cybus.io/wp-content/uploads/2017/10/for-whom1.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 1.0.0",
      "",
      "parameters:",
      "  mssqlHost:",
      "    type: string",
      "    default: 192.168.100.50",
      "",
      "  mssqlPort:",
      "    type: integer",
      "    default: 1433",
      "",
      "  mssqlUser:",
      "    type: string",
      "    default: NodeRed",
      "",
      "  mssqlPassword:",
      "    type: string",
      "    default: Hanl3yC0rk*!",
      "",
      "  mssqlDatabase:",
      "    type: string",
      "    default: CYBUS",
      "",
      "  opcuaHost:",
      "    type: string",
      "    description: OPC-UA Host",
      "    default: 192.168.100.170",
      "",
      "  opcuaPort:",
      "    type: integer",
      "    default: 4990",
      "",
      "  opcuaUser:",
      "    type: string",
      "    default: ''",
      "",
      "  opcuaPass:",
      "    type: string",
      "    default: ''",
      "",
      "resources:",
      "  mssqlConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Mssql",
      "      connection:",
      "        host: !ref mssqlHost",
      "        port: !ref mssqlPort",
      "        username: !ref mssqlUser",
      "        password: !ref mssqlPassword",
      "        database: !ref mssqlDatabase",
      "",
      "  opcuaConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Opcua",
      "      connection:",
      "        host: !ref opcuaHost",
      "        port: !ref opcuaPort",
      "        username: !ref opcuaUser",
      "        password: !ref opcuaPass",
      "",
      "",
      "  fullBatchRecord:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      topic: FullBatchRecord",
      "      protocol: Opcua",
      "      connection: !ref opcuaConnection",
      "      subscribe:",
      "        nodeId: ns=11;s=BatchRecord#[NODERED]BatchRecord",
      "",
      "  mssqlQuery1:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Mssql",
      "      connection: !ref mssqlConnection",
      "      write:",
      "        query: INSERT INTO [CYBUS].[dbo].[batchRecord] (timestamp, batchNumber, partName,",
      "          partNumber, goodParts, scrapParts, totalParts, totalRuntime, totalDowntime)",
      "          VALUES (@timestamp, @value.batchNumber, @partName, @partNumber, @goodParts,",
      "          @scrapParts, @totalParts, @totalRuntime, @totalDowntime)",
      "",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "          topic: !sub \"${Cybus::MqttRoot}/FullBatchRecord\"",
      "        publish:",
      "          endpoint: !ref mssqlQuery1",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"timestamp\": $.timestamp,",
      "                \"batchNumber\": $.value.batchNumber,",
      "                \"partName\": $.value.partName,",
      "                \"partNumber\": $.value.partNumber,",
      "                \"goodParts\": $.value.goodParts,",
      "                \"scrapParts\": $.value.scrapParts,",
      "                \"totalParts\": $.value.totalParts,",
      "                \"totalRuntime\": $.value.totalRuntime,",
      "                \"totalDowntime\": $.value.totalDowntime",
      "              }"
    ],
    "description": "batch_record-to_mssql is a opcua edgeToEdge template",
    "isFileTemplate": true
  },
  "influxdb_resource_endpoint-write-snippet": {
    "prefix": "snippet:influxdb:resource:endpoint-write",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  writeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Influxdb",
      "      connection: !ref influxdbConnection",
      "      write:",
      "        measurement: randomData",
      "",
      "  #----------------------------------------------------------------------------",
      "  # MAPPINGS",
      "  #----------------------------------------------------------------------------",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-write is a influxdb resource snippet",
    "isFileTemplate": true
  },
  "influxdb_resource_ingressroute-snippet": {
    "prefix": "snippet:influxdb:resource:ingressroute",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Ingressroute:",
      "    type: Cybus::IngressRoute",
      "    properties:",
      "      container: !ref influxdb",
      "      type: tcp",
      "      containerPort: 8086",
      "      connectwarePort: 8086",
      "",
      "  #----------------------------------------------------------------------------",
      "  # FRONTENDS",
      "  #----------------------------------------------------------------------------",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "ingressroute is a influxdb resource snippet",
    "isFileTemplate": true
  },
  "influxdb_resource_volume-snippet": {
    "prefix": "snippet:influxdb:resource:volume",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Volume:",
      "    type: Cybus::Volume",
      "    properties: {}",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "volume is a influxdb resource snippet",
    "isFileTemplate": true
  },
  "influxdb_resource_connection-snippet": {
    "prefix": "snippet:influxdb:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Influxdb",
      "      connection:",
      "        scheme: http",
      "        host: connectware",
      "        bucket: generic",
      "        token: !ref influxdbToken",
      "        org: !ref influxdbOrg",
      "",
      "  #----------------------------------------------------------------------------",
      "  # CONTAINERS",
      "  #----------------------------------------------------------------------------",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS:",
      "  influxdbToken: ",
      "    Em2KIZ5BGJC5Y39HAmtYWqc4nyAhR4c24qt6uGlYxJ4Y1GfOZtntqs3UgH1Ea4158k6gD5UKFps8u5Kc1HvSXB1diCxcz0niJpI",
      "  influxdbOrg: cybus",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a influxdb resource snippet",
    "isFileTemplate": true
  },
  "influxdb_resource_container-snippet": {
    "prefix": "snippet:influxdb:resource:container",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Container:",
      "    type: Cybus::Container",
      "    properties:",
      "      image: grafana/grafana:10.2.3",
      "      volumes:",
      "      - !sub '${grafanaVolume}:/var/lib/grafana'",
      "      environment:",
      "        GF_SERVER_ROOT_URL: !sub '/services/${Cybus::ServiceId}/grafana'",
      "        GF_AUTH_ANONYMOUS_ENABLED: true",
      "        INFLUXDB_HOST: !ref influxdb",
      "        INFLUXDB_PORT: 8086",
      "        INFLUXDB_TOKEN: !ref influxdbToken",
      "        INFLUXDB_ORG: !ref influxdbOrg",
      "",
      "  #----------------------------------------------------------------------------",
      "  # VOLUMES",
      "  #----------------------------------------------------------------------------",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS:",
      "  influxdbToken: ",
      "    Em2KIZ5BGJC5Y39HAmtYWqc4nyAhR4c24qt6uGlYxJ4Y1GfOZtntqs3UgH1Ea4158k6gD5UKFps8u5Kc1HvSXB1diCxcz0niJpI",
      "  influxdbOrg: cybus",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "container is a influxdb resource snippet",
    "isFileTemplate": true
  },
  "influxdb_resource_link-snippet": {
    "prefix": "snippet:influxdb:resource:link",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Link:",
      "    type: Cybus::Link",
      "    properties:",
      "      name: Grafana",
      "      ingressRoute: !ref grafanaURL",
      "      href: ''",
      "",
      "  #----------------------------------------------------------------------------",
      "  # ENDPOINTS",
      "  #----------------------------------------------------------------------------",
      "",
      "    #----------------------------------------------------------------------------",
      "    # WRITER",
      "    #----------------------------------------------------------------------------",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "link is a influxdb resource snippet",
    "isFileTemplate": true
  },
  "influxdb_app_deploy-template": {
    "prefix": "template:influxdb:app:deploy",
    "body": [
      "description: Test commissioning File for influxDB connection InfluxDB",
      "",
      "metadata:",
      "  name: InfluxDB Service",
      "  version: 1.0.1",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "# parameters:",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Definitions",
      "#------------------------------------------------------------------------------",
      "",
      "definitions:",
      "  influxdbAdminUsername: admin",
      "  influxdbAdminPassword: supersafepassword #only for example purposes, you may use a valute for real case scenarios",
      "  influxdbToken: ",
      "    Em2KIZ5BGJC5Y39HAmtYWqc4nyAhR4c24qt6uGlYxJ4Y1GfOZtntqs3UgH1Ea4158k6gD5UKFps8u5Kc1HvSXB1diCxcz0niJpI",
      "  influxdbOrg: cybus",
      "",
      "",
      "resources:",
      "  #----------------------------------------------------------------------------",
      "  # CONNECTIONS",
      "  #----------------------------------------------------------------------------",
      "",
      "  influxdbConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Influxdb",
      "      connection:",
      "        scheme: http",
      "        host: connectware",
      "        bucket: generic",
      "        token: !ref influxdbToken",
      "        org: !ref influxdbOrg",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # CONTAINERS",
      "  #----------------------------------------------------------------------------",
      "",
      "  influxdb:",
      "    type: Cybus::Container",
      "    properties:",
      "      image: registry.hub.docker.com/library/influxdb:2.6",
      "      ports:",
      "      - 8086:8086",
      "      volumes:",
      "      - !sub '${influxdbVolume}:/var/lib/influxdb2'",
      "      environment:",
      "        DOCKER_INFLUXDB_INIT_USERNAME: !ref influxdbAdminUsername",
      "        DOCKER_INFLUXDB_INIT_PASSWORD: !ref influxdbAdminPassword",
      "        DOCKER_INFLUXDB_INIT_ORG: !ref influxdbOrg",
      "        DOCKER_INFLUXDB_INIT_BUCKET: generic",
      "        DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: !ref influxdbToken",
      "        DOCKER_INFLUXDB_INIT_MODE: setup",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # VOLUMES",
      "  #----------------------------------------------------------------------------",
      "",
      "  influxdbVolume:",
      "    type: Cybus::Volume",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # INGRESS ROUTES",
      "  #----------------------------------------------------------------------------",
      "",
      "   # InfluxDB",
      "  influxdbRoute:",
      "    type: Cybus::IngressRoute",
      "    properties:",
      "      container: !ref influxdb",
      "      type: tcp",
      "      containerPort: 8086",
      "      connectwarePort: 8086",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # FRONTENDS",
      "  #----------------------------------------------------------------------------",
      "",
      "  Influx_WebUI:",
      "    type: Cybus::Link",
      "    properties:",
      "      name: InfluxDB",
      "      href: http://localhost:8086/",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # ENDPOINTS",
      "  #----------------------------------------------------------------------------",
      "",
      "        #----------------------------------------------------------------------------",
      "        # WRITER",
      "        #----------------------------------------------------------------------------",
      "  # enable writing in the db",
      "  randomData_Write:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Influxdb",
      "      connection: !ref influxdbConnection",
      "      write:",
      "        # name of the measurement in the influxdb. the measurement is synonymous with a table in SQL",
      "        measurement: randomData",
      "",
      "        #----------------------------------------------------------------------------",
      "        # DATA",
      "        #----------------------------------------------------------------------------",
      "",
      "",
      "  #----------------------------------------------------------------------------",
      "  # MAPPINGS",
      "  #----------------------------------------------------------------------------",
      "",
      "  influxdbMapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "            # source topic created in anohter scf",
      "          topic: source/+measurement",
      "        publish:",
      "          endpoint: !ref randomData_Write"
    ],
    "description": "deploy is a influxdb app template",
    "isFileTemplate": true
  },
  "influxdb_edgeToEdge_with_grafana-template": {
    "prefix": "template:influxdb:edgeToEdge:with_grafana",
    "body": [
      "description: Test commissioning File for influxDB connection InfluxDB and Grafana",
      "  without mappings",
      "",
      "metadata:",
      "  name: Quick Guide Service",
      "  version: 1.0.1",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "",
      "",
      "#------------------------------------------------------------------------------",
      "# Definitions",
      "#------------------------------------------------------------------------------",
      "",
      "definitions:",
      "  influxdbAdminUsername: admin",
      "  influxdbAdminPassword: supersafepassword #only for example purposes",
      "  influxdbToken: ",
      "    Em2KIZ5BGJC5Y39HAmtYWqc4nyAhR4c24qt6uGlYxJ4Y1GfOZtntqs3UgH1Ea4158k6gD5UKFps8u5Kc1HvSXB1diCxcz0niJpI",
      "  influxdbOrg: cybus",
      "",
      "resources:",
      "  #----------------------------------------------------------------------------",
      "  # CONNECTIONS",
      "  #----------------------------------------------------------------------------",
      "",
      "  influxdbConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Influxdb",
      "      connection:",
      "        scheme: http",
      "        host: connectware",
      "        bucket: generic",
      "        token: !ref influxdbToken",
      "        org: !ref influxdbOrg",
      "",
      "  #----------------------------------------------------------------------------",
      "  # CONTAINERS",
      "  #----------------------------------------------------------------------------",
      "",
      "  influxdb:",
      "    type: Cybus::Container",
      "    properties:",
      "      image: registry.hub.docker.com/library/influxdb:2.6",
      "      ports:",
      "      - 8086:8086",
      "      volumes:",
      "      - !sub '${influxdbVolume}:/var/lib/influxdb2'",
      "      environment:",
      "        DOCKER_INFLUXDB_INIT_USERNAME: !ref influxdbAdminUsername",
      "        DOCKER_INFLUXDB_INIT_PASSWORD: !ref influxdbAdminPassword",
      "        DOCKER_INFLUXDB_INIT_ORG: !ref influxdbOrg",
      "        DOCKER_INFLUXDB_INIT_BUCKET: generic",
      "        DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: !ref influxdbToken",
      "        DOCKER_INFLUXDB_INIT_MODE: setup",
      "",
      "  genericGrafana:",
      "    type: Cybus::Container",
      "    properties:",
      "      image: grafana/grafana:10.2.3",
      "      volumes:",
      "      - !sub '${grafanaVolume}:/var/lib/grafana'",
      "      environment:",
      "        GF_SERVER_ROOT_URL: !sub '/services/${Cybus::ServiceId}/grafana'",
      "        GF_AUTH_ANONYMOUS_ENABLED: true",
      "        INFLUXDB_HOST: !ref influxdb",
      "        INFLUXDB_PORT: 8086",
      "        INFLUXDB_TOKEN: !ref influxdbToken",
      "        INFLUXDB_ORG: !ref influxdbOrg",
      "",
      "  #----------------------------------------------------------------------------",
      "  # VOLUMES",
      "  #----------------------------------------------------------------------------",
      "",
      "  grafanaVolume:",
      "    type: Cybus::Volume",
      "",
      "  influxdbVolume:",
      "    type: Cybus::Volume",
      "",
      "  #----------------------------------------------------------------------------",
      "  # INGRESS ROUTES",
      "  #----------------------------------------------------------------------------",
      "",
      "  # Grafana",
      "  grafanaURL:",
      "    type: Cybus::IngressRoute",
      "    properties:",
      "      container: !ref genericGrafana",
      "      type: http",
      "      slug: grafana",
      "      target:",
      "        path: /",
      "        port: 3000",
      "",
      "   # InfluxDB",
      "  influxdbRoute:",
      "    type: Cybus::IngressRoute",
      "    properties:",
      "      container: !ref influxdb",
      "      type: tcp",
      "      containerPort: 8086",
      "      connectwarePort: 8086",
      "",
      "  #----------------------------------------------------------------------------",
      "  # FRONTENDS",
      "  #----------------------------------------------------------------------------",
      "",
      "  Influx_WebUI:",
      "    type: Cybus::Link",
      "    properties:",
      "      name: InfluxDB",
      "      href: http://localhost:8086/",
      "",
      "  Grafana_WebUI:",
      "    type: Cybus::Link",
      "    properties:",
      "      name: Grafana",
      "      ingressRoute: !ref grafanaURL",
      "      href: ''",
      "",
      "  #----------------------------------------------------------------------------",
      "  # ENDPOINTS",
      "  #----------------------------------------------------------------------------",
      "",
      "    #----------------------------------------------------------------------------",
      "    # WRITER",
      "    #----------------------------------------------------------------------------",
      "",
      "  influx_Write:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Influxdb",
      "      connection: !ref influxdbConnection",
      "      write:",
      "        measurement: randomData",
      "",
      "  #----------------------------------------------------------------------------",
      "  # MAPPINGS",
      "  #----------------------------------------------------------------------------",
      "",
      "  influxdbMapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "            ## Important!!!",
      "            # A topic, where source data be published.",
      "            # please create and provision it.",
      "          topic: <source/topic>",
      "        publish:",
      "          endpoint: !ref influx_Write"
    ],
    "description": "with_grafana is a influxdb edgeToEdge template",
    "isFileTemplate": true
  },
  "kafka_resource_endpoint-write-snippet": {
    "prefix": "snippet:kafka:resource:endpoint-write",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  writeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Kafka",
      "      connection: !ref kafkaConnection",
      "      write:",
      "        topic: some_test_topic",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-write is a kafka resource snippet",
    "isFileTemplate": true
  },
  "kafka_resource_connection-snippet": {
    "prefix": "snippet:kafka:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Kafka",
      "      connection:",
      "        brokers: [!ref param_brokers]",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  param_brokers:",
      "    description: Hosts or IP addresses of the Apache Kafka broker",
      "    type: string",
      "    default: 192.168.0.1:9092",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a kafka resource snippet",
    "isFileTemplate": true
  },
  "kafka_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:kafka:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  subscribeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Kafka",
      "      connection: !ref kafkaConnection",
      "      subscribe:",
      "        fromBeginning: false",
      "        topic: some_test_topic",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a kafka resource snippet",
    "isFileTemplate": true
  },
  "kafka_resource_connection-mtls-snippet": {
    "prefix": "snippet:kafka:resource:connection-mtls",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any elements under resource properties.",
      " #- The most of elements are optional,fell free to add or remove them as you need.",
      " #- For Adding elements move your cursor where you wanna add and press ctl+space to get the list of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Kafka",
      "      connection:",
      "        brokers: [!ref param_brokers]",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  param_brokers:",
      "    description: Hosts or IP addresses of the Apache Kafka broker",
      "    type: string",
      "    default: 192.168.0.1:9092",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection-mtls is a kafka resource snippet",
    "isFileTemplate": true
  },
  "kafka_bridge_consumer-template": {
    "prefix": "template:kafka:bridge:consumer",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# Commissioning File",
      "# ----------------------------------------------------------------------------#",
      "# Copyright: Cybus GmbH (2020)",
      "# Contact: support@cybus.io",
      "# ----------------------------------------------------------------------------#",
      "# Source Interface Definition - Kafka broker",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: >",
      "  Sample commissioning file for communicating with Kafka broker (consumer)",
      "",
      "metadata:",
      "  name: Apache Kafka Connectivity",
      "  icon: https://www.cybus.io/wp-content/uploads/2017/10/for-whom1.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  param_brokers:",
      "    description: Hosts or IP addresses of the Apache Kafka broker",
      "    type: string",
      "    default: 192.168.0.1:9092",
      "",
      "resources:",
      "  kafkaConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Kafka",
      "      connection:",
      "        clientType: consumer",
      "        brokers: [!ref param_brokers]",
      "",
      "  kafkaSubscribeExample:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Kafka",
      "      connection: !ref kafkaConnection",
      "      subscribe:",
      "        fromBeginning: false",
      "        topic: some_test_topic"
    ],
    "description": "consumer is a kafka bridge template",
    "isFileTemplate": true
  },
  "kafka_bridge_snowflake-write-template": {
    "prefix": "template:kafka:bridge:snowflake-write",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# Commissioning File",
      "# ----------------------------------------------------------------------------#",
      "# Source Interface Definition - Kafka broker",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: >",
      "  Kafka producer",
      "",
      "metadata:",
      "  name: Snowflake Kafka",
      "  version: 0.0.1",
      "",
      "parameters:",
      "",
      "  param_broker:",
      "    description: Hosts Apache Kafka broker",
      "    type: string",
      "    default: HAMS020016:9092",
      "",
      "  burst_interval:",
      "    type: number",
      "    default: 100",
      "",
      "  burst_size:",
      "    type: number",
      "    default: 1",
      "",
      "  buffer_maxSize:",
      "    type: number",
      "    default: 100000",
      "",
      "  buffer_maxAge:",
      "    type: number",
      "    default: 7200",
      "",
      "resources:",
      "",
      "  kafkaConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Kafka",
      "      connection:",
      "        brokers: [!ref param_broker]",
      "",
      "  kafkaWrite:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Kafka",
      "      connection: !ref kafkaConnection",
      "      write:",
      "        topic: this.is.a.topic",
      "      buffering:",
      "        enabled: true",
      "        keepOrder: true",
      "        burstInterval: !ref burst_interval",
      "        burstSize: !ref burst_size",
      "        bufferMaxSize: !ref buffer_maxSize",
      "        bufferMaxAge: !ref buffer_maxAge"
    ],
    "description": "snowflake-write is a kafka bridge template",
    "isFileTemplate": true
  },
  "kafka_bridge_producer-template": {
    "prefix": "template:kafka:bridge:producer",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# Commissioning File",
      "# ----------------------------------------------------------------------------#",
      "# Copyright: Cybus GmbH (2020)",
      "# Contact: support@cybus.io",
      "# ----------------------------------------------------------------------------#",
      "# Source Interface Definition - Kafka broker",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: >",
      "  Sample commissioning file for communicating with Kafka broker (producer)",
      "",
      "metadata:",
      "  name: Apache Kafka Connectivity",
      "  icon: https://www.cybus.io/wp-content/uploads/2017/10/for-whom1.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  param_brokers:",
      "    description: Hosts or IP addresses of the Apache Kafka broker",
      "    type: string",
      "    default: 192.168.0.1:9092",
      "",
      "resources:",
      "  kafkaConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Kafka",
      "      connection:",
      "        brokers: [!ref param_brokers]",
      "",
      "  kafkaWriteExample:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Kafka",
      "      connection: !ref kafkaConnection",
      "      write:",
      "        topic: some_test_topic"
    ],
    "description": "producer is a kafka bridge template",
    "isFileTemplate": true
  },
  "kafka_edgeToEdge_snowflake-wirte-template": {
    "prefix": "template:kafka:edgeToEdge:snowflake-wirte",
    "body": [
      "description: |",
      "  Service Commissioning File for mapped Data to Kafka",
      "",
      "metadata:",
      "  name: Snowflake Mapping",
      "  version: 0.0.1",
      "",
      "resources:",
      "",
      "  TeBISToKafka:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "              ## Important!!!",
      "              # A topic, where source data be published.",
      "              # in case you don't have defined this topic or another for source data. please create and provision it.",
      "        - topic: <source/topic>",
      "        publish:",
      "          topic: services/snowflakekafka/kafkaWrite/this.is.a.topic/set",
      "        rules:",
      "        - transform:",
      "            expression: '{\"value\":{\"value\":$string($)}}'"
    ],
    "description": "snowflake-wirte is a kafka edgeToEdge template",
    "isFileTemplate": true
  },
  "focas_resource_endpoint-read-snippet": {
    "prefix": "snippet:focas:resource:endpoint-read",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "readEndpoint:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Focas",
      "    connection: !ref focasConnection",
      "    read:",
      "      method: program_download",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-read is a focas resource snippet",
    "isFileTemplate": true
  },
  "focas_resource_connection-snippet": {
    "prefix": "snippet:focas:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "Connection:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Focas",
      "    connection:",
      "      host: !ref focasHost",
      "      port: !ref focasPort",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  focasHost:",
      "    type: string",
      "    default: 192.168.2.170",
      "",
      "  focasPort:",
      "    type: integer",
      "    default: 8193",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a focas resource snippet",
    "isFileTemplate": true
  },
  "focas_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:focas:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "subscribeEndpoint:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Focas",
      "    connection: !ref focasConnection",
      "    subscribe:",
      "      method: pmc_rdpmcrng",
      "      interval: 5000",
      "        # F040",
      "      addressType: 1",
      "      dataType: 1",
      "      addressStart: 40",
      "      addressEnd: 41",
      "      dataLength: 10",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a focas resource snippet",
    "isFileTemplate": true
  },
  "focas_bridge_download-template": {
    "prefix": "template:focas:bridge:download",
    "body": [
      "description: >",
      "  Focas Program Download",
      "",
      "metadata:",
      "  name: Focas Program Download",
      "  icon: https://www.cybus.io/wp-content/uploads/2017/10/for-whom1.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  focasHost:",
      "    type: string",
      "    default: 192.168.2.170",
      "",
      "  focasPort:",
      "    type: integer",
      "    default: 8193",
      "",
      "resources:",
      "  focasConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Focas",
      "      connection:",
      "        host: !ref focasHost",
      "        port: !ref focasPort",
      "",
      "  programDownload:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      read:",
      "        method: program_download"
    ],
    "description": "download is a focas bridge template",
    "isFileTemplate": true
  },
  "focas_bridge_machine_service-template": {
    "prefix": "template:focas:bridge:machine_service",
    "body": [
      "description: >",
      "  Fanuc machine public API service",
      "",
      "metadata:",
      "  name: Fanuc Machine Service",
      "  icon: https://www.cybus.io/wp-content/uploads/2017/10/for-whom1.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.3",
      "",
      "parameters:",
      "  focasHost:",
      "    type: string",
      "    default: 192.168.2.170",
      "",
      "  focasPort:",
      "    type: integer",
      "    default: 8193",
      "",
      "  machineName:",
      "    type: string",
      "    default: focasMachine",
      "    description: Name to identifiy the machine on MQTT topics.",
      "",
      "  sampleRate:",
      "    type: integer",
      "    default: 2000",
      "    minimum: 1000",
      "    description: Sample rate of Fanuc parameters in milliseconds.",
      "",
      "definitions:",
      "  sub_params: &sub_params",
      "    method: pmc_rdpmcrng",
      "    interval: !ref sampleRate",
      "    addressType: 0",
      "    dataType: 0",
      "",
      "resources:",
      "  systemstateInterface:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Systemstate",
      "      connection: {}",
      "",
      "  machineOnline:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Systemstate",
      "      connection: !ref systemstateInterface",
      "      topic: machineOnline",
      "      subscribe:",
      "        resourceId: !sub '${Cybus::ServiceId}-focasConnection'",
      "",
      "  focasConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Focas",
      "      connection:",
      "        host: !ref focasHost",
      "        port: !ref focasPort",
      "",
      "  statInfo2:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      subscribe:",
      "        method: cnc_statinfo2",
      "        interval: !ref sampleRate",
      "",
      "  cnc_rdprgnum:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      subscribe:",
      "        method: cnc_rdprgnum",
      "        interval: !ref sampleRate",
      "",
      "  cnc_exeprgname:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      subscribe:",
      "        method: cnc_exeprgname",
      "        interval: !ref sampleRate",
      "",
      "  pmc_rdpmcrng_G004:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      subscribe:",
      "        <<: *sub_params",
      "        addressStart: 4",
      "        addressEnd: 4",
      "        dataLength: 16",
      "",
      "  pmc_rdpmcrng_G012_FeedrateOverride:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      subscribe:",
      "        <<: *sub_params",
      "        addressStart: 12",
      "        addressEnd: 12",
      "        dataLength: 16",
      "",
      "  pmc_rdpmcrng_G014_RapidTraverseOverride:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      subscribe:",
      "        <<: *sub_params",
      "        addressStart: 14",
      "        addressEnd: 14",
      "        dataLength: 16",
      "",
      "  pmc_rdpmcrng_G030_SpindleOverride:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      subscribe:",
      "        <<: *sub_params",
      "        addressStart: 30",
      "        addressEnd: 30",
      "        dataLength: 16",
      "",
      "  pmc_rdpmcrng_RPDO_rapidTraverseSignal:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      subscribe:",
      "        method: pmc_rdpmcrng",
      "        interval: !ref sampleRate",
      "        # F002.1",
      "        addressType: 1",
      "        dataType: 0",
      "        addressStart: 2",
      "        addressEnd: 2",
      "        dataLength: 16",
      "",
      "",
      "  stateMonitorStatusParameter:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "        # machineOnline",
      "      - subscribe:",
      "          endpoint: !ref machineOnline",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/machineOnline",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"timestamp\": timestamp,",
      "                \"value\": (state = \"connected\")",
      "              }",
      "",
      "        # programRunning",
      "      - subscribe:",
      "          endpoint: !ref statInfo2",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/programRunning",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"timestamp\": timestamp,",
      "                \"value\": (value.run = 3)",
      "              }",
      "",
      "        # programStopped",
      "      - subscribe:",
      "          endpoint: !ref statInfo2",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/programStopped",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"timestamp\": timestamp,",
      "                \"value\": (value.run = 1 or value.run = 2)",
      "              }",
      "",
      "        # programCompleted",
      "      - subscribe:",
      "          endpoint: !ref pmc_rdpmcrng_G004",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/programCompleted",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              (",
      "                $FIN := $bitmask(value.cdata[0], 3);",
      "                {",
      "                  \"timestamp\": timestamp,",
      "                  \"value\": $FIN",
      "                }",
      "              )",
      "",
      "        # feedRateOverride (inverted and 255 -> 0)",
      "      - subscribe:",
      "          endpoint: !ref pmc_rdpmcrng_G012_FeedrateOverride",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/feedRateOverride",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              (",
      "                  $override := 255 - value.cdata[0];",
      "                  {",
      "                    \"value\": ($override > 254 ? 0 : $override)",
      "                  }",
      "              )",
      "",
      "        # rapidTraverseOverride (in steps of 100%, 50%, 25%, 0%)",
      "      - subscribe:",
      "          endpoint: !ref pmc_rdpmcrng_G014_RapidTraverseOverride",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/rapidTraverseOverride",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              (",
      "                  $steps := [100, 50, 25, 0];",
      "                  $index := value.cdata[0];",
      "                  {",
      "                    \"value\": $steps[$index]",
      "                  }",
      "              )",
      "",
      "        # spindleOverride (range: 0% to 254%)",
      "      - subscribe:",
      "          endpoint: !ref pmc_rdpmcrng_G030_SpindleOverride",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/spindleOverride",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              (",
      "                  $override := value.cdata[0];",
      "                  {",
      "                    \"value\": ($override > 254 ? 254 : $override)",
      "                  }",
      "              )",
      "",
      "        # rapidTraverseActive",
      "      - subscribe:",
      "          endpoint: !ref pmc_rdpmcrng_RPDO_rapidTraverseSignal",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/rapidTraverseActive",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              (",
      "                $F002 := $decodeBitmask(value.cdata[0], [\"INCH\", \"RPDO\", \"CSS\", \"THRD\"]);",
      "                {",
      "                  \"timestamp\": timestamp,",
      "                  \"value\": $F002.RPDO",
      "                }",
      "              )",
      "",
      "        # modeAutomatic",
      "      - subscribe:",
      "          endpoint: !ref statInfo2",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/modeAutomatic",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"timestamp\": timestamp,",
      "                \"value\": (value.aut <= 3)",
      "              }",
      "",
      "        # modeManual",
      "      - subscribe:",
      "          endpoint: !ref statInfo2",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/modeManual",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"timestamp\": timestamp,",
      "                \"value\": (value.aut >= 5)",
      "              }",
      "",
      "        # modeHandwheel",
      "      - subscribe:",
      "          endpoint: !ref statInfo2",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/modeHandwheel",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"timestamp\": timestamp,",
      "                \"value\": (value.aut = 4)",
      "              }",
      "",
      "        # programNumber",
      "      - subscribe:",
      "          endpoint: !ref cnc_rdprgnum",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/programNumber",
      "        rules:",
      "        - transform:",
      "            expression: |",
      "              {",
      "                \"timestamp\": timestamp,",
      "                \"value\": value.data",
      "              }",
      "",
      "        # programNameAndNumber",
      "      - subscribe:",
      "          endpoint: !ref cnc_exeprgname",
      "        publish:",
      "          topic: !sub fanuc/${machineName}/programNameAndNumber",
      "        rules:",
      "        - transform:",
      "            expression: |-",
      "              {",
      "                \"timestamp\": timestamp,",
      "                \"value\": value.name & \"_\" & value.o_num",
      "              }"
    ],
    "description": "machine_service is a focas bridge template",
    "isFileTemplate": true
  },
  "focas_bridge_read-template": {
    "prefix": "template:focas:bridge:read",
    "body": [
      "description: >",
      "  Focas Actual Spindle Speed Service",
      "",
      "metadata:",
      "  name: Focas Actual Spindle Speed Service",
      "  icon: https://www.cybus.io/wp-content/uploads/2017/10/for-whom1.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  focasHost:",
      "    type: string",
      "    default: 192.168.2.170",
      "",
      "  focasPort:",
      "    type: integer",
      "    default: 8193",
      "",
      "resources:",
      "  focasConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Focas",
      "      connection:",
      "        host: !ref focasHost",
      "        port: !ref focasPort",
      "",
      "  actualSpindleSpeed:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Focas",
      "      connection: !ref focasConnection",
      "      subscribe:",
      "        method: pmc_rdpmcrng",
      "        interval: 5000",
      "        # F040",
      "        addressType: 1",
      "        dataType: 1",
      "        addressStart: 40",
      "        addressEnd: 41",
      "        dataLength: 10"
    ],
    "description": "read is a focas bridge template",
    "isFileTemplate": true
  },
  "bacnet_resource_endpoint-write-snippet": {
    "prefix": "snippet:bacnet:resource:endpoint-write",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "writeEndpoint:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Bacnet",
      "    connection: !ref bacnetConnection",
      "    write:",
      "      objectType: binary-output",
      "      objectInstance: 303",
      "      property: present-value",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-write is a bacnet resource snippet",
    "isFileTemplate": true
  },
  "bacnet_resource_connection-snippet": {
    "prefix": "snippet:bacnet:resource:connection",
    "body": [
      "# !!! Move me under parameteres section",
      "IP_Address:",
      "  type: string",
      "  default: 10.203.60.253",
      "",
      "Port_Number:",
      "  type: number",
      "  default: 47808",
      "",
      "Device_Instance:",
      "  type: number",
      "  default: 9000",
      "",
      "initialReconnectDelay:",
      "  type: integer",
      "  default: 1000",
      "",
      "maxReconnectDelay:",
      "  type: integer",
      "  default: 30000",
      "",
      "factorReconnectDelay:",
      "  type: integer",
      "  default: 2",
      "",
      "# !!! Move me under resources section",
      "bacnetConnection:",
      "  type: Cybus::Connection",
      "  properties:",
      "    protocol: Bacnet",
      "    targetState: connected",
      "    connection:",
      "      deviceInstance: !ref Device_Instance",
      "      deviceAddress: !sub '${IP_Address}:${Port_Number}'",
      "      connectionStrategy:",
      "        initialDelay: !ref initialReconnectDelay",
      "        maxDelay: !ref maxReconnectDelay",
      "        incrementFactor: !ref factorReconnectDelay"
    ],
    "description": "connection is a bacnet resource snippet",
    "isFileTemplate": true
  },
  "bacnet_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:bacnet:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property, parameter or definition you dose not need",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "subscribeEndpoint:",
      "  type: Cybus::Endpoint",
      "  properties:",
      "    protocol: Bacnet",
      "    connection: !ref bacnetConnection",
      "    subscribe:",
      "      objectType: binary-output",
      "      objectInstance: 303",
      "      property: present-value",
      "      priority: 8",
      "      interval: 1000",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a bacnet resource snippet",
    "isFileTemplate": true
  },
  "bacnet_resource_connection-template": {
    "prefix": "template:bacnet:resource:connection",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# BACnet Commissioning File Example",
      "# ----------------------------------------------------------------------------#",
      "# Copyright: Cybus GmbH (2021)",
      "# Contact: support@cybus.io",
      "# ----------------------------------------------------------------------------#",
      "# Source Interface Definition - BACnet",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: |",
      "  Sample commissioning file for Bacnet protocol connectivity",
      "",
      "metadata:",
      "",
      "  name: Bacnet Protocol Connectivity",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  IP_Address:",
      "    type: string",
      "    default: 10.203.60.253",
      "",
      "  Port_Number:",
      "    type: number",
      "    default: 47808",
      "",
      "  Device_Instance:",
      "    type: number",
      "    default: 9000",
      "",
      "  initialReconnectDelay:",
      "    type: integer",
      "    default: 1000",
      "",
      "  maxReconnectDelay:",
      "    type: integer",
      "    default: 30000",
      "",
      "  factorReconnectDelay:",
      "    type: integer",
      "    default: 2",
      "",
      "resources:",
      "  # Lets define the connection to the device.",
      "  bacnetConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Bacnet",
      "      targetState: connected",
      "      connection:",
      "        deviceInstance: !ref Device_Instance",
      "        deviceAddress: !sub '${IP_Address}:${Port_Number}'",
      "        connectionStrategy:",
      "          initialDelay: !ref initialReconnectDelay",
      "          maxDelay: !ref maxReconnectDelay",
      "          incrementFactor: !ref factorReconnectDelay"
    ],
    "description": "connection is a bacnet resource template",
    "isFileTemplate": true
  },
  "bacnet_bridge_read-write-template": {
    "prefix": "template:bacnet:bridge:read-write",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# Commissioning File",
      "# ----------------------------------------------------------------------------#",
      "# Copyright: Cybus GmbH (2020)",
      "# Contact: support@cybus.io",
      "# ----------------------------------------------------------------------------#",
      "# Source Interface Definition - BACnet",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: |",
      "  Sample comissioning file for Bacnet protocol connectivity and data mapping",
      "",
      "metadata:",
      "",
      "  name: Bacnet Protocol Connectivity",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  IP_Address:",
      "    type: string",
      "    default: 192.168.10.30",
      "",
      "  Port_Number:",
      "    type: number",
      "    default: 47808",
      "",
      "  Device_Instance:",
      "    type: number",
      "    default: 2000",
      "",
      "resources:",
      "",
      "  bacnetConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Bacnet",
      "      targetState: connected",
      "      connection:",
      "        deviceInstance: !ref Device_Instance",
      "        deviceAddress: !sub '${IP_Address}:${Port_Number}'",
      "        localPort: 48808",
      "",
      "  bacnetSubscribeBinaryOutput:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Bacnet",
      "      connection: !ref bacnetConnection",
      "      subscribe:",
      "        objectType: binary-output",
      "        objectInstance: 303",
      "        property: present-value",
      "        priority: 8",
      "        interval: 1000",
      "",
      "  BinaryInput:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Bacnet",
      "      connection: !ref bacnetConnection",
      "      write:",
      "        objectType: binary-output",
      "        objectInstance: 303",
      "        property: present-value"
    ],
    "description": "read-write is a bacnet bridge template",
    "isFileTemplate": true
  },
  "modbus_resource_endpoint-write-snippet": {
    "prefix": "snippet:modbus:resource:endpoint-write",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  writeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      write:",
      "        fc: 5",
      "        length: 2",
      "        address: 3",
      "        dataType: boolean",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-write is a modbus resource snippet",
    "isFileTemplate": true
  },
  "modbus_resource_connection-snippet": {
    "prefix": "snippet:modbus:resource:connection",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  Connection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Modbus",
      "      targetState: connected",
      "      connection:",
      "        host: !ref IP_Address",
      "        port: !ref Port_Number",
      "        connectionStrategy:",
      "          initialDelay: !ref initialReconnectDelay",
      "          maxDelay: !ref maxReconnectDelay",
      "          incrementFactor: !ref factorReconnectDelay",
      "",
      "MOVE MY CONTENT TO PARAMETERS:",
      "  IP_Address:",
      "    type: string",
      "    default: 192.168.10.30",
      "",
      "  Port_Number:",
      "    type: number",
      "    default: 502",
      "",
      "  initialReconnectDelay:",
      "    type: integer",
      "    default: 1000",
      "",
      "  maxReconnectDelay:",
      "    type: integer",
      "    default: 30000",
      "",
      "  factorReconnectDelay:",
      "    type: integer",
      "    default: 2",
      "",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "connection is a modbus resource snippet",
    "isFileTemplate": true
  },
  "modbus_resource_endpoint-subscribe-snippet": {
    "prefix": "snippet:modbus:resource:endpoint-subscribe",
    "body": [
      "# ---------------------------------------------------------------------------------------#",
      "# Notes:",
      " #- Ensure to move every object to its own section in your service commisioning file.",
      " #- Feel free to add or remove any property under resource properties.",
      " #- Feel free to rename any resource or parameter name.",
      " #- Move your cursor Where you want to add property and press ctl+space to get suggestions of available elements.",
      "# ---------------------------------------------------------------------------------------#",
      "MOVE MY CONTENT TO RESOURCES:",
      "  subscribeEndpoint:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      subscribe:",
      "        fc: 1",
      "        length: 2",
      "        interval: 1000",
      "        address: 3",
      "        dataType: boolean",
      "",
      "MOVE MY CONTENT TO PARAMETERS: {}",
      "MOVE MY CONTENT TO DEFINITIONS: {}",
      "# --------------------------------------------------# ",
      "# End of Snippet",
      "# --------------------------------------------------#"
    ],
    "description": "endpoint-subscribe is a modbus resource snippet",
    "isFileTemplate": true
  },
  "modbus_resource_connection-template": {
    "prefix": "template:modbus:resource:connection",
    "body": [
      "#------------------------------------------------------------------------------",
      "# Meta Data Section",
      "#------------------------------------------------------------------------------",
      "description: |",
      "  This file covers a Modbus Connection.",
      "metadata:",
      "  name: Connection Modbus",
      "  version: 1.0.0",
      "",
      "#------------------------------------------------------------------------------",
      "# Parameters",
      "#------------------------------------------------------------------------------",
      "parameters:",
      "  IP_Address:",
      "    type: string",
      "    default: 192.168.10.30",
      "",
      "  Port_Number:",
      "    type: number",
      "    default: 502",
      "",
      "  initialReconnectDelay:",
      "    type: integer",
      "    default: 1000",
      "",
      "  maxReconnectDelay:",
      "    type: integer",
      "    default: 30000",
      "",
      "  factorReconnectDelay:",
      "    type: integer",
      "    default: 2",
      "",
      "#------------------------------------------------------------------------------",
      "# Endpoint Attribute",
      "#------------------------------------------------------------------------------",
      "resources:",
      "  genericReadConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Modbus",
      "      targetState: connected",
      "      connection:",
      "        host: !ref IP_Address",
      "        port: !ref Port_Number",
      "        connectionStrategy:",
      "          initialDelay: !ref initialReconnectDelay",
      "          maxDelay: !ref maxReconnectDelay",
      "          incrementFactor: !ref factorReconnectDelay"
    ],
    "description": "connection is a modbus resource template",
    "isFileTemplate": true
  },
  "modbus_bridge_generic_write-template": {
    "prefix": "template:modbus:bridge:generic_write",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# Commissioning File",
      "# ----------------------------------------------------------------------------#",
      "# Copyright: Cybus GmbH (2020)",
      "# Contact: support@cybus.io",
      "# ----------------------------------------------------------------------------#",
      "# Source Interface Definition - Modbus TCP",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: |",
      "  Sample commissioning file for Modbus TCP protocol connectivity and data mapping",
      "",
      "metadata:",
      "  name: ModBus TCP Protocol Connectivity",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  IP_Address:",
      "    type: string",
      "    default: 192.168.10.30",
      "",
      "  Port_Number:",
      "    type: number",
      "    default: 502",
      "",
      "  initialReconnectDelay:",
      "    type: integer",
      "    default: 1000",
      "",
      "  maxReconnectDelay:",
      "    type: integer",
      "    default: 30000",
      "",
      "  factorReconnectDelay:",
      "    type: integer",
      "    default: 2",
      "",
      "resources:",
      "  modbusConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Modbus",
      "      targetState: connected",
      "      connection:",
      "        host: !ref IP_Address",
      "        port: !ref Port_Number",
      "        connectionStrategy:",
      "          initialDelay: !ref initialReconnectDelay",
      "          maxDelay: !ref maxReconnectDelay",
      "          incrementFactor: !ref factorReconnectDelay",
      "",
      "  writeCoil:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      write:",
      "        fc: 5",
      "        length: 2",
      "        address: 3",
      "        dataType: boolean",
      "",
      "",
      "",
      "  writeRegister:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      write:",
      "        fc: 6",
      "        length: 2",
      "        address: 1",
      "        dataType: int16BE"
    ],
    "description": "generic_write is a modbus bridge template",
    "isFileTemplate": true
  },
  "modbus_bridge_generic_read-template": {
    "prefix": "template:modbus:bridge:generic_read",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# Commissioning File",
      "# ----------------------------------------------------------------------------#",
      "# Copyright: Cybus GmbH (2020)",
      "# Contact: support@cybus.io",
      "# ----------------------------------------------------------------------------#",
      "# Source Interface Definition - Modbus TCP",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: |",
      "  Sample commissioning file for Modbus TCP protocol connectivity and data mapping",
      "",
      "metadata:",
      "  name: ModBus TCP Protocol Connectivity",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  IP_Address:",
      "    type: string",
      "    default: 192.168.10.30",
      "",
      "  Port_Number:",
      "    type: number",
      "    default: 502",
      "",
      "  initialReconnectDelay:",
      "    type: integer",
      "    default: 1000",
      "",
      "  maxReconnectDelay:",
      "    type: integer",
      "    default: 30000",
      "",
      "  factorReconnectDelay:",
      "    type: integer",
      "    default: 2",
      "",
      "resources:",
      "  modbusConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Modbus",
      "      targetState: connected",
      "      connection:",
      "        host: !ref IP_Address",
      "        port: !ref Port_Number",
      "        connectionStrategy:",
      "          initialDelay: !ref initialReconnectDelay",
      "          maxDelay: !ref maxReconnectDelay",
      "          incrementFactor: !ref factorReconnectDelay",
      "",
      "  readCoil:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      subscribe:",
      "        fc: 1",
      "        length: 2",
      "        interval: 1000",
      "        address: 3",
      "        dataType: boolean",
      "",
      "  readRegister:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      subscribe:",
      "        fc: 3",
      "        length: 2",
      "        interval: 1000",
      "        address: 1",
      "        dataType: int16BE"
    ],
    "description": "generic_read is a modbus bridge template",
    "isFileTemplate": true
  },
  "modbus_edgeToEdge_generic-read_write-template": {
    "prefix": "template:modbus:edgeToEdge:generic-read_write",
    "body": [
      "# ----------------------------------------------------------------------------#",
      "# Commissioning File",
      "# ----------------------------------------------------------------------------#",
      "# Copyright: Cybus GmbH (2020)",
      "# Contact: support@cybus.io",
      "# ----------------------------------------------------------------------------#",
      "# Source Interface Definition - Modbus TCP",
      "# ----------------------------------------------------------------------------#",
      "",
      "description: |",
      "  Sample commissioning file for Modbus TCP protocol connectivity and data mapping",
      "",
      "metadata:",
      "  name: ModBus TCP Protocol Connectivity",
      "  icon: https://www.cybus.io/wp-content/uploads/2019/03/Cybus-logo-Claim-lang.svg",
      "  provider: cybus",
      "  homepage: https://www.cybus.io",
      "  version: 0.0.1",
      "",
      "parameters:",
      "  IP_Address:",
      "    type: string",
      "    default: 192.168.10.30",
      "",
      "  Port_Number:",
      "    type: number",
      "    default: 502",
      "",
      "  initialReconnectDelay:",
      "    type: integer",
      "    default: 1000",
      "",
      "  maxReconnectDelay:",
      "    type: integer",
      "    default: 30000",
      "",
      "  factorReconnectDelay:",
      "    type: integer",
      "    default: 2",
      "",
      "resources:",
      "  modbusConnection:",
      "    type: Cybus::Connection",
      "    properties:",
      "      protocol: Modbus",
      "      targetState: connected",
      "      connection:",
      "        host: !ref IP_Address",
      "        port: !ref Port_Number",
      "        connectionStrategy:",
      "          initialDelay: !ref initialReconnectDelay",
      "          maxDelay: !ref maxReconnectDelay",
      "          incrementFactor: !ref factorReconnectDelay",
      "",
      "  readCoil:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      subscribe:",
      "        fc: 1",
      "        length: 2",
      "        interval: 1000",
      "        address: 3",
      "        dataType: boolean",
      "",
      "  writeCoil:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      write:",
      "        fc: 5",
      "        length: 2",
      "        address: 3",
      "        dataType: boolean",
      "",
      "  readRegister:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      subscribe:",
      "        fc: 3",
      "        length: 2",
      "        interval: 1000",
      "        address: 1",
      "        dataType: int16BE",
      "",
      "  writeRegister:",
      "    type: Cybus::Endpoint",
      "    properties:",
      "      protocol: Modbus",
      "      connection: !ref modbusConnection",
      "      write:",
      "        fc: 6",
      "        length: 2",
      "        address: 1",
      "        dataType: int16BE",
      "",
      "  mapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "          endpoint: !ref readCoil",
      "        publish:",
      "          topic: !sub '${Cybus::MqttRoot}/read/coil'",
      "      - subscribe:",
      "          topic: !sub '${Cybus::MqttRoot}/write/coil'",
      "        publish:",
      "          endpoint: !ref writeCoil",
      "      - subscribe:",
      "          endpoint: !ref readRegister",
      "        publish:",
      "          topic: !sub '${Cybus::MqttRoot}/read/register'",
      "      - subscribe:",
      "          topic: !sub '${Cybus::MqttRoot}/write/register'",
      "        publish:",
      "          endpoint: !ref writeRegister"
    ],
    "description": "generic-read_write is a modbus edgeToEdge template",
    "isFileTemplate": true
  },
  "http_server_resource_server-snippet": {
    "prefix": "snippet:http_server:resource:server",
    "body": [
      "httpServer:",
      "  type: Cybus::Server::Http",
      "  properties:",
      "    basePath: /cybustest"
    ],
    "description": "server is a http_server resource snippet",
    "isFileTemplate": true
  },
  "http_server_resource_route-snippet": {
    "prefix": "snippet:http_server:resource:route",
    "body": [
      "Route:",
      "  type: Cybus::Node::Http",
      "  properties:",
      "    parent: !ref httpServer",
      "    method: <GET | PUT | POST>",
      "    route: /getRoute"
    ],
    "description": "route is a http_server resource snippet",
    "isFileTemplate": true
  },
  "http_server_app_all_routes-template": {
    "prefix": "template:http_server:app:all_routes",
    "body": [
      "description: Provides a demonstration structure for a http server configured in the",
      "  protocol mapper",
      "",
      "metadata:",
      "  name: Definition By Example for HTTP Endpoints",
      "",
      "parameters: {}",
      "",
      "resources:",
      "  httpServer:",
      "    type: Cybus::Server::Http",
      "    properties:",
      "      basePath: /cybustest",
      "",
      "  postRoute:",
      "    type: Cybus::Node::Http",
      "    properties:",
      "      parent: !ref httpServer",
      "      method: POST",
      "      route: /postRoute",
      "",
      "  putRoute:",
      "    type: Cybus::Node::Http",
      "    properties:",
      "      parent: !ref httpServer",
      "      method: PUT",
      "      route: /putRoute",
      "",
      "  getRoute:",
      "    type: Cybus::Node::Http",
      "    properties:",
      "      parent: !ref httpServer",
      "      method: GET",
      "      route: /getRoute"
    ],
    "description": "all_routes is a http_server app template",
    "isFileTemplate": true
  },
  "http_server_edgeToEdge_with_http-template": {
    "prefix": "template:http_server:edgeToEdge:with_http",
    "body": [
      "description: Provides a demonstration structure for a http server configured in the",
      "  protocol mapper",
      "",
      "metadata:",
      "  name: Definition By Example for HTTP Endpoints",
      "",
      "parameters: {}",
      "",
      "resources:",
      "  httpServer:",
      "    type: Cybus::Server::Http",
      "    properties:",
      "      basePath: /cybustest",
      "",
      "  postRoute:",
      "    type: Cybus::Node::Http",
      "    properties:",
      "      parent: !ref httpServer",
      "      method: POST",
      "      route: /postRoute",
      "",
      "  putRoute:",
      "    type: Cybus::Node::Http",
      "    properties:",
      "      parent: !ref httpServer",
      "      method: PUT",
      "      route: /putRoute",
      "",
      "  getRoute:",
      "    type: Cybus::Node::Http",
      "    properties:",
      "      parent: !ref httpServer",
      "      method: GET",
      "      route: /getRoute",
      "",
      "  httpMapping:",
      "    type: Cybus::Mapping",
      "    properties:",
      "      mappings:",
      "      - subscribe:",
      "                    ## Important!!!",
      "                    # A topic, where source data be published.",
      "                    # please create and provision it.",
      "          topic: <source/topic>",
      "        publish:",
      "          endpoint: !ref postRoute",
      "      - subscribe:",
      "                    ## Important!!!",
      "                    # A topic, where source data be published.",
      "                    # please create and provision it.",
      "          topic: <source/topic>",
      "        publish:",
      "          endpoint: !ref putRoute",
      "      - subscribe:",
      "          endpoint: !ref getRoute",
      "        publish:",
      "          topic: destination/topic"
    ],
    "description": "with_http is a http_server edgeToEdge template",
    "isFileTemplate": true
  }
}